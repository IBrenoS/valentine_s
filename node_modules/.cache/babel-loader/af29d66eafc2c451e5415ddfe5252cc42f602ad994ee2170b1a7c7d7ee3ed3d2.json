{"ast":null,"code":"const HueSaturationShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    hue: {\n      value: 0\n    },\n    saturation: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float hue;\", \"uniform float saturation;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n  // hue\n  \"\tfloat angle = hue * 3.14159265;\", \"\tfloat s = sin(angle), c = cos(angle);\", \"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\", \"\tfloat len = length(gl_FragColor.rgb);\", \"\tgl_FragColor.rgb = vec3(\", \"\t\tdot(gl_FragColor.rgb, weights.xyz),\", \"\t\tdot(gl_FragColor.rgb, weights.zxy),\", \"\t\tdot(gl_FragColor.rgb, weights.yzx)\", \"\t);\",\n  // saturation\n  \"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\", \"\tif (saturation > 0.0) {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\", \"\t} else {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { HueSaturationShader };","map":{"version":3,"names":["HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\HueSaturationShader.ts"],"sourcesContent":["/**\n * Hue and saturation adjustment\n * https://github.com/evanw/glfx.js\n * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\n\nexport const HueSaturationShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    hue: { value: 0 },\n    saturation: { value: 0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform float hue;',\n    'uniform float saturation;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tgl_FragColor = texture2D( tDiffuse, vUv );',\n\n    // hue\n    '\tfloat angle = hue * 3.14159265;',\n    '\tfloat s = sin(angle), c = cos(angle);',\n    '\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;',\n    '\tfloat len = length(gl_FragColor.rgb);',\n    '\tgl_FragColor.rgb = vec3(',\n    '\t\tdot(gl_FragColor.rgb, weights.xyz),',\n    '\t\tdot(gl_FragColor.rgb, weights.zxy),',\n    '\t\tdot(gl_FragColor.rgb, weights.yzx)',\n    '\t);',\n\n    // saturation\n    '\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;',\n    '\tif (saturation > 0.0) {',\n    '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));',\n    '\t} else {',\n    '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);',\n    '\t}',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":"AAOO,MAAMA,mBAAA,GAAsB;EACjCC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,GAAA,EAAK;MAAED,KAAA,EAAO;IAAE;IAChBE,UAAA,EAAY;MAAEF,KAAA,EAAO;IAAE;EACzB;EAEAG,YAAA,EAAc,CACZ,qBAEA,iBAEA,cAEA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,+BACA,sBACA,6BAEA,qBAEA,iBAEA;EAAA;EAGA,oCACA,0CACA,uFACA,0CACA,6BACA,yCACA,yCACA,wCACA;EAAA;EAGA,8EACA,4BACA,4FACA,aACA,uEACA,MAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}