{"ast":null,"code":"const FocusShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    screenWidth: {\n      value: 1024\n    },\n    screenHeight: {\n      value: 1024\n    },\n    sampleDistance: {\n      value: 0.94\n    },\n    waveFactor: {\n      value: 125e-5\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float screenWidth;\", \"uniform float screenHeight;\", \"uniform float sampleDistance;\", \"uniform float waveFactor;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color, org, tmp, add;\", \"\tfloat sample_dist, f;\", \"\tvec2 vin;\", \"\tvec2 uv = vUv;\", \"\tadd = color = org = texture2D( tDiffuse, uv );\", \"\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\", \"\tsample_dist = dot( vin, vin ) * 2.0;\", \"\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\", \"\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\", \"\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\", \"\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { FocusShader };","map":{"version":3,"names":["FocusShader","uniforms","tDiffuse","value","screenWidth","screenHeight","sampleDistance","waveFactor","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\FocusShader.ts"],"sourcesContent":["/**\n * Focus shader\n * based on PaintEffect postprocess from ro.me\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n */\n\nexport const FocusShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    screenWidth: { value: 1024 },\n    screenHeight: { value: 1024 },\n    sampleDistance: { value: 0.94 },\n    waveFactor: { value: 0.00125 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform float screenWidth;',\n    'uniform float screenHeight;',\n    'uniform float sampleDistance;',\n    'uniform float waveFactor;',\n\n    'uniform sampler2D tDiffuse;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec4 color, org, tmp, add;',\n    '\tfloat sample_dist, f;',\n    '\tvec2 vin;',\n    '\tvec2 uv = vUv;',\n\n    '\tadd = color = org = texture2D( tDiffuse, uv );',\n\n    '\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );',\n    '\tsample_dist = dot( vin, vin ) * 2.0;',\n\n    '\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;',\n\n    '\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );',\n    '\tif( tmp.b < color.b ) color = tmp;',\n\n    '\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );',\n    '\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );',\n\n    '\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":"AAMO,MAAMA,WAAA,GAAc;EACzBC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,WAAA,EAAa;MAAED,KAAA,EAAO;IAAK;IAC3BE,YAAA,EAAc;MAAEF,KAAA,EAAO;IAAK;IAC5BG,cAAA,EAAgB;MAAEH,KAAA,EAAO;IAAK;IAC9BI,UAAA,EAAY;MAAEJ,KAAA,EAAO;IAAQ;EAC/B;EAEAK,YAAA,EAAc,CACZ,qBAEA,iBAEA,cACA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,8BACA,+BACA,iCACA,6BAEA,+BAEA,qBAEA,iBAEA,+BACA,0BACA,cACA,mBAEA,mDAEA,8CACA,yCAEA,qEAEA,kFAEA,sFACA,uCAEA,sFACA,uCAEA,uFACA,uCAEA,uFACA,uCAEA,wFACA,uCAEA,wFACA,uCAEA,uFACA,uCAEA,yDACA,iGAEA,kFAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}