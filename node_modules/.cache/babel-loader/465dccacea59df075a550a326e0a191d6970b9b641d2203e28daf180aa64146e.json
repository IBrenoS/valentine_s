{"ast":null,"code":"const HalftoneShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    shape: {\n      value: 1\n    },\n    radius: {\n      value: 4\n    },\n    rotateR: {\n      value: Math.PI / 12 * 1\n    },\n    rotateG: {\n      value: Math.PI / 12 * 2\n    },\n    rotateB: {\n      value: Math.PI / 12 * 3\n    },\n    scatter: {\n      value: 0\n    },\n    width: {\n      value: 1\n    },\n    height: {\n      value: 1\n    },\n    blending: {\n      value: 1\n    },\n    blendingMode: {\n      value: 1\n    },\n    greyscale: {\n      value: false\n    },\n    disable: {\n      value: false\n    }\n  },\n  vertexShader: [\"varying vec2 vUV;\", \"void main() {\", \"\tvUV = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#define SQRT2_MINUS_ONE 0.41421356\", \"#define SQRT2_HALF_MINUS_ONE 0.20710678\", \"#define PI2 6.28318531\", \"#define SHAPE_DOT 1\", \"#define SHAPE_ELLIPSE 2\", \"#define SHAPE_LINE 3\", \"#define SHAPE_SQUARE 4\", \"#define BLENDING_LINEAR 1\", \"#define BLENDING_MULTIPLY 2\", \"#define BLENDING_ADD 3\", \"#define BLENDING_LIGHTER 4\", \"#define BLENDING_DARKER 5\", \"uniform sampler2D tDiffuse;\", \"uniform float radius;\", \"uniform float rotateR;\", \"uniform float rotateG;\", \"uniform float rotateB;\", \"uniform float scatter;\", \"uniform float width;\", \"uniform float height;\", \"uniform int shape;\", \"uniform bool disable;\", \"uniform float blending;\", \"uniform int blendingMode;\", \"varying vec2 vUV;\", \"uniform bool greyscale;\", \"const int samples = 8;\", \"float blend( float a, float b, float t ) {\",\n  // linear blend\n  \"\treturn a * ( 1.0 - t ) + b * t;\", \"}\", \"float hypot( float x, float y ) {\",\n  // vector magnitude\n  \"\treturn sqrt( x * x + y * y );\", \"}\", \"float rand( vec2 seed ){\",\n  // get pseudo-random number\n  \"return fract( sin( dot( seed.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\", \"}\", \"float distanceToDotRadius( float channel, vec2 coord, vec2 normal, vec2 p, float angle, float rad_max ) {\",\n  // apply shape-specific transforms\n  \"\tfloat dist = hypot( coord.x - p.x, coord.y - p.y );\", \"\tfloat rad = channel;\", \"\tif ( shape == SHAPE_DOT ) {\", \"\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\", \"\t} else if ( shape == SHAPE_ELLIPSE ) {\", \"\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\", \"\t\tif ( dist != 0.0 ) {\", \"\t\t\tfloat dot_p = abs( ( p.x - coord.x ) / dist * normal.x + ( p.y - coord.y ) / dist * normal.y );\", \"\t\t\tdist = ( dist * ( 1.0 - SQRT2_HALF_MINUS_ONE ) ) + dot_p * dist * SQRT2_MINUS_ONE;\", \"\t\t}\", \"\t} else if ( shape == SHAPE_LINE ) {\", \"\t\trad = pow( abs( rad ), 1.5) * rad_max;\", \"\t\tfloat dot_p = ( p.x - coord.x ) * normal.x + ( p.y - coord.y ) * normal.y;\", \"\t\tdist = hypot( normal.x * dot_p, normal.y * dot_p );\", \"\t} else if ( shape == SHAPE_SQUARE ) {\", \"\t\tfloat theta = atan( p.y - coord.y, p.x - coord.x ) - angle;\", \"\t\tfloat sin_t = abs( sin( theta ) );\", \"\t\tfloat cos_t = abs( cos( theta ) );\", \"\t\trad = pow( abs( rad ), 1.4 );\", \"\t\trad = rad_max * ( rad + ( ( sin_t > cos_t ) ? rad - sin_t * rad : rad - cos_t * rad ) );\", \"\t}\", \"\treturn rad - dist;\", \"}\", \"struct Cell {\",\n  // grid sample positions\n  \"\tvec2 normal;\", \"\tvec2 p1;\", \"\tvec2 p2;\", \"\tvec2 p3;\", \"\tvec2 p4;\", \"\tfloat samp2;\", \"\tfloat samp1;\", \"\tfloat samp3;\", \"\tfloat samp4;\", \"};\", \"vec4 getSample( vec2 point ) {\",\n  // multi-sampled point\n  \"\tvec4 tex = texture2D( tDiffuse, vec2( point.x / width, point.y / height ) );\", \"\tfloat base = rand( vec2( floor( point.x ), floor( point.y ) ) ) * PI2;\", \"\tfloat step = PI2 / float( samples );\", \"\tfloat dist = radius * 0.66;\", \"\tfor ( int i = 0; i < samples; ++i ) {\", \"\t\tfloat r = base + step * float( i );\", \"\t\tvec2 coord = point + vec2( cos( r ) * dist, sin( r ) * dist );\", \"\t\ttex += texture2D( tDiffuse, vec2( coord.x / width, coord.y / height ) );\", \"\t}\", \"\ttex /= float( samples ) + 1.0;\", \"\treturn tex;\", \"}\", \"float getDotColour( Cell c, vec2 p, int channel, float angle, float aa ) {\",\n  // get colour for given point\n  \"\tfloat dist_c_1, dist_c_2, dist_c_3, dist_c_4, res;\", \"\tif ( channel == 0 ) {\", \"\t\tc.samp1 = getSample( c.p1 ).r;\", \"\t\tc.samp2 = getSample( c.p2 ).r;\", \"\t\tc.samp3 = getSample( c.p3 ).r;\", \"\t\tc.samp4 = getSample( c.p4 ).r;\", \"\t} else if (channel == 1) {\", \"\t\tc.samp1 = getSample( c.p1 ).g;\", \"\t\tc.samp2 = getSample( c.p2 ).g;\", \"\t\tc.samp3 = getSample( c.p3 ).g;\", \"\t\tc.samp4 = getSample( c.p4 ).g;\", \"\t} else {\", \"\t\tc.samp1 = getSample( c.p1 ).b;\", \"\t\tc.samp3 = getSample( c.p3 ).b;\", \"\t\tc.samp2 = getSample( c.p2 ).b;\", \"\t\tc.samp4 = getSample( c.p4 ).b;\", \"\t}\", \"\tdist_c_1 = distanceToDotRadius( c.samp1, c.p1, c.normal, p, angle, radius );\", \"\tdist_c_2 = distanceToDotRadius( c.samp2, c.p2, c.normal, p, angle, radius );\", \"\tdist_c_3 = distanceToDotRadius( c.samp3, c.p3, c.normal, p, angle, radius );\", \"\tdist_c_4 = distanceToDotRadius( c.samp4, c.p4, c.normal, p, angle, radius );\", \"\tres = ( dist_c_1 > 0.0 ) ? clamp( dist_c_1 / aa, 0.0, 1.0 ) : 0.0;\", \"\tres += ( dist_c_2 > 0.0 ) ? clamp( dist_c_2 / aa, 0.0, 1.0 ) : 0.0;\", \"\tres += ( dist_c_3 > 0.0 ) ? clamp( dist_c_3 / aa, 0.0, 1.0 ) : 0.0;\", \"\tres += ( dist_c_4 > 0.0 ) ? clamp( dist_c_4 / aa, 0.0, 1.0 ) : 0.0;\", \"\tres = clamp( res, 0.0, 1.0 );\", \"\treturn res;\", \"}\", \"Cell getReferenceCell( vec2 p, vec2 origin, float grid_angle, float step ) {\",\n  // get containing cell\n  \"\tCell c;\",\n  // calc grid\n  \"\tvec2 n = vec2( cos( grid_angle ), sin( grid_angle ) );\", \"\tfloat threshold = step * 0.5;\", \"\tfloat dot_normal = n.x * ( p.x - origin.x ) + n.y * ( p.y - origin.y );\", \"\tfloat dot_line = -n.y * ( p.x - origin.x ) + n.x * ( p.y - origin.y );\", \"\tvec2 offset = vec2( n.x * dot_normal, n.y * dot_normal );\", \"\tfloat offset_normal = mod( hypot( offset.x, offset.y ), step );\", \"\tfloat normal_dir = ( dot_normal < 0.0 ) ? 1.0 : -1.0;\", \"\tfloat normal_scale = ( ( offset_normal < threshold ) ? -offset_normal : step - offset_normal ) * normal_dir;\", \"\tfloat offset_line = mod( hypot( ( p.x - offset.x ) - origin.x, ( p.y - offset.y ) - origin.y ), step );\", \"\tfloat line_dir = ( dot_line < 0.0 ) ? 1.0 : -1.0;\", \"\tfloat line_scale = ( ( offset_line < threshold ) ? -offset_line : step - offset_line ) * line_dir;\",\n  // get closest corner\n  \"\tc.normal = n;\", \"\tc.p1.x = p.x - n.x * normal_scale + n.y * line_scale;\", \"\tc.p1.y = p.y - n.y * normal_scale - n.x * line_scale;\",\n  // scatter\n  \"\tif ( scatter != 0.0 ) {\", \"\t\tfloat off_mag = scatter * threshold * 0.5;\", \"\t\tfloat off_angle = rand( vec2( floor( c.p1.x ), floor( c.p1.y ) ) ) * PI2;\", \"\t\tc.p1.x += cos( off_angle ) * off_mag;\", \"\t\tc.p1.y += sin( off_angle ) * off_mag;\", \"\t}\",\n  // find corners\n  \"\tfloat normal_step = normal_dir * ( ( offset_normal < threshold ) ? step : -step );\", \"\tfloat line_step = line_dir * ( ( offset_line < threshold ) ? step : -step );\", \"\tc.p2.x = c.p1.x - n.x * normal_step;\", \"\tc.p2.y = c.p1.y - n.y * normal_step;\", \"\tc.p3.x = c.p1.x + n.y * line_step;\", \"\tc.p3.y = c.p1.y - n.x * line_step;\", \"\tc.p4.x = c.p1.x - n.x * normal_step + n.y * line_step;\", \"\tc.p4.y = c.p1.y - n.y * normal_step - n.x * line_step;\", \"\treturn c;\", \"}\", \"float blendColour( float a, float b, float t ) {\",\n  // blend colours\n  \"\tif ( blendingMode == BLENDING_LINEAR ) {\", \"\t\treturn blend( a, b, 1.0 - t );\", \"\t} else if ( blendingMode == BLENDING_ADD ) {\", \"\t\treturn blend( a, min( 1.0, a + b ), t );\", \"\t} else if ( blendingMode == BLENDING_MULTIPLY ) {\", \"\t\treturn blend( a, max( 0.0, a * b ), t );\", \"\t} else if ( blendingMode == BLENDING_LIGHTER ) {\", \"\t\treturn blend( a, max( a, b ), t );\", \"\t} else if ( blendingMode == BLENDING_DARKER ) {\", \"\t\treturn blend( a, min( a, b ), t );\", \"\t} else {\", \"\t\treturn blend( a, b, 1.0 - t );\", \"\t}\", \"}\", \"void main() {\", \"\tif ( ! disable ) {\",\n  // setup\n  \"\t\tvec2 p = vec2( vUV.x * width, vUV.y * height );\", \"\t\tvec2 origin = vec2( 0, 0 );\", \"\t\tfloat aa = ( radius < 2.5 ) ? radius * 0.5 : 1.25;\",\n  // get channel samples\n  \"\t\tCell cell_r = getReferenceCell( p, origin, rotateR, radius );\", \"\t\tCell cell_g = getReferenceCell( p, origin, rotateG, radius );\", \"\t\tCell cell_b = getReferenceCell( p, origin, rotateB, radius );\", \"\t\tfloat r = getDotColour( cell_r, p, 0, rotateR, aa );\", \"\t\tfloat g = getDotColour( cell_g, p, 1, rotateG, aa );\", \"\t\tfloat b = getDotColour( cell_b, p, 2, rotateB, aa );\",\n  // blend with original\n  \"\t\tvec4 colour = texture2D( tDiffuse, vUV );\", \"\t\tr = blendColour( r, colour.r, blending );\", \"\t\tg = blendColour( g, colour.g, blending );\", \"\t\tb = blendColour( b, colour.b, blending );\", \"\t\tif ( greyscale ) {\", \"\t\t\tr = g = b = (r + b + g) / 3.0;\", \"\t\t}\", \"\t\tgl_FragColor = vec4( r, g, b, 1.0 );\", \"\t} else {\", \"\t\tgl_FragColor = texture2D( tDiffuse, vUV );\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { HalftoneShader };","map":{"version":3,"names":["HalftoneShader","uniforms","tDiffuse","value","shape","radius","rotateR","Math","PI","rotateG","rotateB","scatter","width","height","blending","blendingMode","greyscale","disable","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\HalftoneShader.ts"],"sourcesContent":["/**\n * RGB Halftone shader for three.js.\n *\tNOTE:\n * \t\tShape (1 = Dot, 2 = Ellipse, 3 = Line, 4 = Square)\n *\t\tBlending Mode (1 = Linear, 2 = Multiply, 3 = Add, 4 = Lighter, 5 = Darker)\n */\n\nexport const HalftoneShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    shape: { value: 1 },\n    radius: { value: 4 },\n    rotateR: { value: (Math.PI / 12) * 1 },\n    rotateG: { value: (Math.PI / 12) * 2 },\n    rotateB: { value: (Math.PI / 12) * 3 },\n    scatter: { value: 0 },\n    width: { value: 1 },\n    height: { value: 1 },\n    blending: { value: 1 },\n    blendingMode: { value: 1 },\n    greyscale: { value: false },\n    disable: { value: false },\n  },\n\n  vertexShader: [\n    'varying vec2 vUV;',\n\n    'void main() {',\n\n    '\tvUV = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    '#define SQRT2_MINUS_ONE 0.41421356',\n    '#define SQRT2_HALF_MINUS_ONE 0.20710678',\n    '#define PI2 6.28318531',\n    '#define SHAPE_DOT 1',\n    '#define SHAPE_ELLIPSE 2',\n    '#define SHAPE_LINE 3',\n    '#define SHAPE_SQUARE 4',\n    '#define BLENDING_LINEAR 1',\n    '#define BLENDING_MULTIPLY 2',\n    '#define BLENDING_ADD 3',\n    '#define BLENDING_LIGHTER 4',\n    '#define BLENDING_DARKER 5',\n    'uniform sampler2D tDiffuse;',\n    'uniform float radius;',\n    'uniform float rotateR;',\n    'uniform float rotateG;',\n    'uniform float rotateB;',\n    'uniform float scatter;',\n    'uniform float width;',\n    'uniform float height;',\n    'uniform int shape;',\n    'uniform bool disable;',\n    'uniform float blending;',\n    'uniform int blendingMode;',\n    'varying vec2 vUV;',\n    'uniform bool greyscale;',\n    'const int samples = 8;',\n\n    'float blend( float a, float b, float t ) {',\n\n    // linear blend\n    '\treturn a * ( 1.0 - t ) + b * t;',\n\n    '}',\n\n    'float hypot( float x, float y ) {',\n\n    // vector magnitude\n    '\treturn sqrt( x * x + y * y );',\n\n    '}',\n\n    'float rand( vec2 seed ){',\n\n    // get pseudo-random number\n    'return fract( sin( dot( seed.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );',\n\n    '}',\n\n    'float distanceToDotRadius( float channel, vec2 coord, vec2 normal, vec2 p, float angle, float rad_max ) {',\n\n    // apply shape-specific transforms\n    '\tfloat dist = hypot( coord.x - p.x, coord.y - p.y );',\n    '\tfloat rad = channel;',\n\n    '\tif ( shape == SHAPE_DOT ) {',\n\n    '\t\trad = pow( abs( rad ), 1.125 ) * rad_max;',\n\n    '\t} else if ( shape == SHAPE_ELLIPSE ) {',\n\n    '\t\trad = pow( abs( rad ), 1.125 ) * rad_max;',\n\n    '\t\tif ( dist != 0.0 ) {',\n    '\t\t\tfloat dot_p = abs( ( p.x - coord.x ) / dist * normal.x + ( p.y - coord.y ) / dist * normal.y );',\n    '\t\t\tdist = ( dist * ( 1.0 - SQRT2_HALF_MINUS_ONE ) ) + dot_p * dist * SQRT2_MINUS_ONE;',\n    '\t\t}',\n\n    '\t} else if ( shape == SHAPE_LINE ) {',\n\n    '\t\trad = pow( abs( rad ), 1.5) * rad_max;',\n    '\t\tfloat dot_p = ( p.x - coord.x ) * normal.x + ( p.y - coord.y ) * normal.y;',\n    '\t\tdist = hypot( normal.x * dot_p, normal.y * dot_p );',\n\n    '\t} else if ( shape == SHAPE_SQUARE ) {',\n\n    '\t\tfloat theta = atan( p.y - coord.y, p.x - coord.x ) - angle;',\n    '\t\tfloat sin_t = abs( sin( theta ) );',\n    '\t\tfloat cos_t = abs( cos( theta ) );',\n    '\t\trad = pow( abs( rad ), 1.4 );',\n    '\t\trad = rad_max * ( rad + ( ( sin_t > cos_t ) ? rad - sin_t * rad : rad - cos_t * rad ) );',\n\n    '\t}',\n\n    '\treturn rad - dist;',\n\n    '}',\n\n    'struct Cell {',\n\n    // grid sample positions\n    '\tvec2 normal;',\n    '\tvec2 p1;',\n    '\tvec2 p2;',\n    '\tvec2 p3;',\n    '\tvec2 p4;',\n    '\tfloat samp2;',\n    '\tfloat samp1;',\n    '\tfloat samp3;',\n    '\tfloat samp4;',\n\n    '};',\n\n    'vec4 getSample( vec2 point ) {',\n\n    // multi-sampled point\n    '\tvec4 tex = texture2D( tDiffuse, vec2( point.x / width, point.y / height ) );',\n    '\tfloat base = rand( vec2( floor( point.x ), floor( point.y ) ) ) * PI2;',\n    '\tfloat step = PI2 / float( samples );',\n    '\tfloat dist = radius * 0.66;',\n\n    '\tfor ( int i = 0; i < samples; ++i ) {',\n\n    '\t\tfloat r = base + step * float( i );',\n    '\t\tvec2 coord = point + vec2( cos( r ) * dist, sin( r ) * dist );',\n    '\t\ttex += texture2D( tDiffuse, vec2( coord.x / width, coord.y / height ) );',\n\n    '\t}',\n\n    '\ttex /= float( samples ) + 1.0;',\n    '\treturn tex;',\n\n    '}',\n\n    'float getDotColour( Cell c, vec2 p, int channel, float angle, float aa ) {',\n\n    // get colour for given point\n    '\tfloat dist_c_1, dist_c_2, dist_c_3, dist_c_4, res;',\n\n    '\tif ( channel == 0 ) {',\n\n    '\t\tc.samp1 = getSample( c.p1 ).r;',\n    '\t\tc.samp2 = getSample( c.p2 ).r;',\n    '\t\tc.samp3 = getSample( c.p3 ).r;',\n    '\t\tc.samp4 = getSample( c.p4 ).r;',\n\n    '\t} else if (channel == 1) {',\n\n    '\t\tc.samp1 = getSample( c.p1 ).g;',\n    '\t\tc.samp2 = getSample( c.p2 ).g;',\n    '\t\tc.samp3 = getSample( c.p3 ).g;',\n    '\t\tc.samp4 = getSample( c.p4 ).g;',\n\n    '\t} else {',\n\n    '\t\tc.samp1 = getSample( c.p1 ).b;',\n    '\t\tc.samp3 = getSample( c.p3 ).b;',\n    '\t\tc.samp2 = getSample( c.p2 ).b;',\n    '\t\tc.samp4 = getSample( c.p4 ).b;',\n\n    '\t}',\n\n    '\tdist_c_1 = distanceToDotRadius( c.samp1, c.p1, c.normal, p, angle, radius );',\n    '\tdist_c_2 = distanceToDotRadius( c.samp2, c.p2, c.normal, p, angle, radius );',\n    '\tdist_c_3 = distanceToDotRadius( c.samp3, c.p3, c.normal, p, angle, radius );',\n    '\tdist_c_4 = distanceToDotRadius( c.samp4, c.p4, c.normal, p, angle, radius );',\n    '\tres = ( dist_c_1 > 0.0 ) ? clamp( dist_c_1 / aa, 0.0, 1.0 ) : 0.0;',\n    '\tres += ( dist_c_2 > 0.0 ) ? clamp( dist_c_2 / aa, 0.0, 1.0 ) : 0.0;',\n    '\tres += ( dist_c_3 > 0.0 ) ? clamp( dist_c_3 / aa, 0.0, 1.0 ) : 0.0;',\n    '\tres += ( dist_c_4 > 0.0 ) ? clamp( dist_c_4 / aa, 0.0, 1.0 ) : 0.0;',\n    '\tres = clamp( res, 0.0, 1.0 );',\n\n    '\treturn res;',\n\n    '}',\n\n    'Cell getReferenceCell( vec2 p, vec2 origin, float grid_angle, float step ) {',\n\n    // get containing cell\n    '\tCell c;',\n\n    // calc grid\n    '\tvec2 n = vec2( cos( grid_angle ), sin( grid_angle ) );',\n    '\tfloat threshold = step * 0.5;',\n    '\tfloat dot_normal = n.x * ( p.x - origin.x ) + n.y * ( p.y - origin.y );',\n    '\tfloat dot_line = -n.y * ( p.x - origin.x ) + n.x * ( p.y - origin.y );',\n    '\tvec2 offset = vec2( n.x * dot_normal, n.y * dot_normal );',\n    '\tfloat offset_normal = mod( hypot( offset.x, offset.y ), step );',\n    '\tfloat normal_dir = ( dot_normal < 0.0 ) ? 1.0 : -1.0;',\n    '\tfloat normal_scale = ( ( offset_normal < threshold ) ? -offset_normal : step - offset_normal ) * normal_dir;',\n    '\tfloat offset_line = mod( hypot( ( p.x - offset.x ) - origin.x, ( p.y - offset.y ) - origin.y ), step );',\n    '\tfloat line_dir = ( dot_line < 0.0 ) ? 1.0 : -1.0;',\n    '\tfloat line_scale = ( ( offset_line < threshold ) ? -offset_line : step - offset_line ) * line_dir;',\n\n    // get closest corner\n    '\tc.normal = n;',\n    '\tc.p1.x = p.x - n.x * normal_scale + n.y * line_scale;',\n    '\tc.p1.y = p.y - n.y * normal_scale - n.x * line_scale;',\n\n    // scatter\n    '\tif ( scatter != 0.0 ) {',\n\n    '\t\tfloat off_mag = scatter * threshold * 0.5;',\n    '\t\tfloat off_angle = rand( vec2( floor( c.p1.x ), floor( c.p1.y ) ) ) * PI2;',\n    '\t\tc.p1.x += cos( off_angle ) * off_mag;',\n    '\t\tc.p1.y += sin( off_angle ) * off_mag;',\n\n    '\t}',\n\n    // find corners\n    '\tfloat normal_step = normal_dir * ( ( offset_normal < threshold ) ? step : -step );',\n    '\tfloat line_step = line_dir * ( ( offset_line < threshold ) ? step : -step );',\n    '\tc.p2.x = c.p1.x - n.x * normal_step;',\n    '\tc.p2.y = c.p1.y - n.y * normal_step;',\n    '\tc.p3.x = c.p1.x + n.y * line_step;',\n    '\tc.p3.y = c.p1.y - n.x * line_step;',\n    '\tc.p4.x = c.p1.x - n.x * normal_step + n.y * line_step;',\n    '\tc.p4.y = c.p1.y - n.y * normal_step - n.x * line_step;',\n\n    '\treturn c;',\n\n    '}',\n\n    'float blendColour( float a, float b, float t ) {',\n\n    // blend colours\n    '\tif ( blendingMode == BLENDING_LINEAR ) {',\n    '\t\treturn blend( a, b, 1.0 - t );',\n    '\t} else if ( blendingMode == BLENDING_ADD ) {',\n    '\t\treturn blend( a, min( 1.0, a + b ), t );',\n    '\t} else if ( blendingMode == BLENDING_MULTIPLY ) {',\n    '\t\treturn blend( a, max( 0.0, a * b ), t );',\n    '\t} else if ( blendingMode == BLENDING_LIGHTER ) {',\n    '\t\treturn blend( a, max( a, b ), t );',\n    '\t} else if ( blendingMode == BLENDING_DARKER ) {',\n    '\t\treturn blend( a, min( a, b ), t );',\n    '\t} else {',\n    '\t\treturn blend( a, b, 1.0 - t );',\n    '\t}',\n\n    '}',\n\n    'void main() {',\n\n    '\tif ( ! disable ) {',\n\n    // setup\n    '\t\tvec2 p = vec2( vUV.x * width, vUV.y * height );',\n    '\t\tvec2 origin = vec2( 0, 0 );',\n    '\t\tfloat aa = ( radius < 2.5 ) ? radius * 0.5 : 1.25;',\n\n    // get channel samples\n    '\t\tCell cell_r = getReferenceCell( p, origin, rotateR, radius );',\n    '\t\tCell cell_g = getReferenceCell( p, origin, rotateG, radius );',\n    '\t\tCell cell_b = getReferenceCell( p, origin, rotateB, radius );',\n    '\t\tfloat r = getDotColour( cell_r, p, 0, rotateR, aa );',\n    '\t\tfloat g = getDotColour( cell_g, p, 1, rotateG, aa );',\n    '\t\tfloat b = getDotColour( cell_b, p, 2, rotateB, aa );',\n\n    // blend with original\n    '\t\tvec4 colour = texture2D( tDiffuse, vUV );',\n    '\t\tr = blendColour( r, colour.r, blending );',\n    '\t\tg = blendColour( g, colour.g, blending );',\n    '\t\tb = blendColour( b, colour.b, blending );',\n\n    '\t\tif ( greyscale ) {',\n    '\t\t\tr = g = b = (r + b + g) / 3.0;',\n    '\t\t}',\n\n    '\t\tgl_FragColor = vec4( r, g, b, 1.0 );',\n\n    '\t} else {',\n\n    '\t\tgl_FragColor = texture2D( tDiffuse, vUV );',\n\n    '\t}',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":"AAOO,MAAMA,cAAA,GAAiB;EAC5BC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,KAAA,EAAO;MAAED,KAAA,EAAO;IAAE;IAClBE,MAAA,EAAQ;MAAEF,KAAA,EAAO;IAAE;IACnBG,OAAA,EAAS;MAAEH,KAAA,EAAQI,IAAA,CAAKC,EAAA,GAAK,KAAM;IAAE;IACrCC,OAAA,EAAS;MAAEN,KAAA,EAAQI,IAAA,CAAKC,EAAA,GAAK,KAAM;IAAE;IACrCE,OAAA,EAAS;MAAEP,KAAA,EAAQI,IAAA,CAAKC,EAAA,GAAK,KAAM;IAAE;IACrCG,OAAA,EAAS;MAAER,KAAA,EAAO;IAAE;IACpBS,KAAA,EAAO;MAAET,KAAA,EAAO;IAAE;IAClBU,MAAA,EAAQ;MAAEV,KAAA,EAAO;IAAE;IACnBW,QAAA,EAAU;MAAEX,KAAA,EAAO;IAAE;IACrBY,YAAA,EAAc;MAAEZ,KAAA,EAAO;IAAE;IACzBa,SAAA,EAAW;MAAEb,KAAA,EAAO;IAAM;IAC1Bc,OAAA,EAAS;MAAEd,KAAA,EAAO;IAAM;EAC1B;EAEAe,YAAA,EAAc,CACZ,qBAEA,iBAEA,cACA,4EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,sCACA,2CACA,0BACA,uBACA,2BACA,wBACA,0BACA,6BACA,+BACA,0BACA,8BACA,6BACA,+BACA,yBACA,0BACA,0BACA,0BACA,0BACA,wBACA,yBACA,sBACA,yBACA,2BACA,6BACA,qBACA,2BACA,0BAEA;EAAA;EAGA,oCAEA,KAEA;EAAA;EAGA,kCAEA,KAEA;EAAA;EAGA,gFAEA,KAEA;EAAA;EAGA,wDACA,yBAEA,gCAEA,+CAEA,2CAEA,+CAEA,0BACA,sGACA,yFACA,OAEA,wCAEA,4CACA,gFACA,yDAEA,0CAEA,iEACA,wCACA,wCACA,mCACA,8FAEA,MAEA,uBAEA,KAEA;EAAA;EAGA,iBACA,aACA,aACA,aACA,aACA,iBACA,iBACA,iBACA,iBAEA,MAEA;EAAA;EAGA,iFACA,2EACA,yCACA,gCAEA,0CAEA,yCACA,oEACA,8EAEA,MAEA,mCACA,gBAEA,KAEA;EAAA;EAGA,uDAEA,0BAEA,oCACA,oCACA,oCACA,oCAEA,+BAEA,oCACA,oCACA,oCACA,oCAEA,aAEA,oCACA,oCACA,oCACA,oCAEA,MAEA,iFACA,iFACA,iFACA,iFACA,uEACA,wEACA,wEACA,wEACA,kCAEA,gBAEA,KAEA;EAAA;EAGA;EAAA;EAGA,2DACA,kCACA,4EACA,2EACA,8DACA,oEACA,0DACA,iHACA,4GACA,sDACA;EAAA;EAGA,kBACA,0DACA;EAAA;EAGA,4BAEA,gDACA,+EACA,2CACA,2CAEA;EAAA;EAGA,uFACA,iFACA,yCACA,yCACA,uCACA,uCACA,2DACA,2DAEA,cAEA,KAEA;EAAA;EAGA,6CACA,oCACA,iDACA,8CACA,sDACA,8CACA,qDACA,wCACA,oDACA,wCACA,aACA,oCACA,MAEA,KAEA,iBAEA;EAAA;EAGA,qDACA,iCACA;EAAA;EAGA,mEACA,mEACA,mEACA,0DACA,0DACA;EAAA;EAGA,+CACA,+CACA,+CACA,+CAEA,wBACA,qCACA,OAEA,0CAEA,aAEA,gDAEA,MAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}