{"ast":null,"code":"import { Vector2 } from \"three\";\nconst TriangleBlurShader = {\n  uniforms: {\n    texture: {\n      value: null\n    },\n    delta: {\n      value: new Vector2(1, 1)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"#define ITERATIONS 10.0\", \"uniform sampler2D texture;\", \"uniform vec2 delta;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color = vec4( 0.0 );\", \"\tfloat total = 0.0;\",\n  // randomize the lookup values to hide the fixed number of samples\n  \"\tfloat offset = rand( vUv );\", \"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\", \"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\", \"\t\tfloat weight = 1.0 - abs( percent );\", \"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\", \"\t\ttotal += weight;\", \"\t}\", \"\tgl_FragColor = color / total;\", \"}\"].join(\"\\n\")\n};\nexport { TriangleBlurShader };","map":{"version":3,"names":["TriangleBlurShader","uniforms","texture","value","delta","Vector2","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\TriangleBlurShader.ts"],"sourcesContent":["import { Vector2 } from 'three'\n\n/**\n * Triangle blur shader\n * based on glfx.js triangle blur shader\n * https://github.com/evanw/glfx.js\n *\n * A basic blur filter, which convolves the image with a\n * pyramid filter. The pyramid filter is separable and is applied as two\n * perpendicular triangle filters.\n */\n\nexport const TriangleBlurShader = {\n  uniforms: {\n    texture: { value: null },\n    delta: { value: new Vector2(1, 1) },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    '#include <common>',\n\n    '#define ITERATIONS 10.0',\n\n    'uniform sampler2D texture;',\n    'uniform vec2 delta;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec4 color = vec4( 0.0 );',\n\n    '\tfloat total = 0.0;',\n\n    // randomize the lookup values to hide the fixed number of samples\n\n    '\tfloat offset = rand( vUv );',\n\n    '\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {',\n\n    '\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;',\n    '\t\tfloat weight = 1.0 - abs( percent );',\n\n    '\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;',\n    '\t\ttotal += weight;',\n\n    '\t}',\n\n    '\tgl_FragColor = color / total;',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":";AAYO,MAAMA,kBAAA,GAAqB;EAChCC,QAAA,EAAU;IACRC,OAAA,EAAS;MAAEC,KAAA,EAAO;IAAK;IACvBC,KAAA,EAAO;MAAED,KAAA,EAAO,IAAIE,OAAA,CAAQ,GAAG,CAAC;IAAE;EACpC;EAEAC,YAAA,EAAc,CACZ,qBAEA,iBAEA,cACA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,qBAEA,2BAEA,8BACA,uBAEA,qBAEA,iBAEA,8BAEA;EAAA;EAIA,gCAEA,2DAEA,wDACA,0CAEA,oEACA,sBAEA,MAEA,kCAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}