{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst _VRButton = class {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement(\"button\");\n    function showEnterVR() {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener(\"end\", onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = \"EXIT VR\";\n        currentSession = session;\n      }\n      function onSessionEnded() {\n        currentSession.removeEventListener(\"end\", onSessionEnded);\n        button.textContent = \"ENTER VR\";\n        currentSession = null;\n      }\n      button.style.display = \"\";\n      button.style.cursor = \"pointer\";\n      button.style.left = \"calc(50% - 50px)\";\n      button.style.width = \"100px\";\n      button.textContent = \"ENTER VR\";\n      button.onmouseenter = () => {\n        button.style.opacity = \"1.0\";\n      };\n      button.onmouseleave = () => {\n        button.style.opacity = \"0.5\";\n      };\n      button.onclick = () => {\n        var _a;\n        if (currentSession === null) {\n          const optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n          (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", {\n            ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = \"\";\n      button.style.cursor = \"auto\";\n      button.style.left = \"calc(50% - 75px)\";\n      button.style.width = \"150px\";\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = \"VR NOT SUPPORTED\";\n    }\n    function stylizeElement(element) {\n      element.style.position = \"absolute\";\n      element.style.bottom = \"20px\";\n      element.style.padding = \"12px 6px\";\n      element.style.border = \"1px solid #fff\";\n      element.style.borderRadius = \"4px\";\n      element.style.background = \"rgba(0,0,0,0.1)\";\n      element.style.color = \"#fff\";\n      element.style.font = \"normal 13px sans-serif\";\n      element.style.textAlign = \"center\";\n      element.style.opacity = \"0.5\";\n      element.style.outline = \"none\";\n      element.style.zIndex = \"999\";\n    }\n    if (\"xr\" in navigator) {\n      stylizeElement(button);\n      button.id = \"VRButton\";\n      button.style.display = \"none\";\n      navigator.xr.isSessionSupported(\"immersive-vr\").then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n        if (supported && _VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement(\"a\");\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, \"https:\");\n        message.innerHTML = \"WEBXR NEEDS HTTPS\";\n      } else {\n        message.href = \"https://immersiveweb.dev/\";\n        message.innerHTML = \"WEBXR NOT AVAILABLE\";\n      }\n      message.style.left = \"calc(50% - 90px)\";\n      message.style.width = \"180px\";\n      message.style.textDecoration = \"none\";\n      stylizeElement(message);\n      return message;\n    }\n  }\n  static registerSessionGrantedListener() {\n    if (typeof navigator !== \"undefined\" && \"xr\" in navigator) {\n      navigator.xr.addEventListener(\"sessiongranted\", () => {\n        _VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n};\nlet VRButton = _VRButton;\n__publicField(VRButton, \"xrSessionIsGranted\", false);\nVRButton.registerSessionGrantedListener();\nexport { VRButton };","map":{"version":3,"names":["_VRButton","createButton","renderer","sessionInit","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_a","optionalFeatures","flat","filter","Boolean","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener","VRButton","__publicField"],"sources":["D:\\valentines_website\\node_modules\\src\\webxr\\VRButton.ts"],"sourcesContent":["import { WebGLRenderer } from 'three'\n\nclass VRButton {\n  static createButton(renderer: WebGLRenderer, sessionInit: XRSessionInit = {}): HTMLButtonElement | HTMLAnchorElement {\n    const button = document.createElement('button')\n\n    function showEnterVR(/*device*/): void {\n      let currentSession: XRSession | null = null\n\n      async function onSessionStarted(session: XRSession): Promise<void> {\n        session.addEventListener('end', onSessionEnded)\n\n        await renderer.xr.setSession(session as any)\n        button.textContent = 'EXIT VR'\n\n        currentSession = session\n      }\n\n      function onSessionEnded(/*event*/): void {\n        currentSession!.removeEventListener('end', onSessionEnded)\n\n        button.textContent = 'ENTER VR'\n\n        currentSession = null\n      }\n\n      //\n\n      button.style.display = ''\n\n      button.style.cursor = 'pointer'\n      button.style.left = 'calc(50% - 50px)'\n      button.style.width = '100px'\n\n      button.textContent = 'ENTER VR'\n\n      button.onmouseenter = (): void => {\n        button.style.opacity = '1.0'\n      }\n\n      button.onmouseleave = (): void => {\n        button.style.opacity = '0.5'\n      }\n\n      button.onclick = (): void => {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking']\n            .flat()\n            .filter(Boolean) as string[]\n\n          ;(navigator as Navigator).xr\n            ?.requestSession('immersive-vr', { ...sessionInit, optionalFeatures })\n            .then(onSessionStarted)\n        } else {\n          currentSession.end()\n        }\n      }\n    }\n\n    function disableButton(): void {\n      button.style.display = ''\n\n      button.style.cursor = 'auto'\n      button.style.left = 'calc(50% - 75px)'\n      button.style.width = '150px'\n\n      button.onmouseenter = null\n      button.onmouseleave = null\n\n      button.onclick = null\n    }\n\n    function showWebXRNotFound(): void {\n      disableButton()\n\n      button.textContent = 'VR NOT SUPPORTED'\n    }\n\n    function stylizeElement(element: HTMLElement): void {\n      element.style.position = 'absolute'\n      element.style.bottom = '20px'\n      element.style.padding = '12px 6px'\n      element.style.border = '1px solid #fff'\n      element.style.borderRadius = '4px'\n      element.style.background = 'rgba(0,0,0,0.1)'\n      element.style.color = '#fff'\n      element.style.font = 'normal 13px sans-serif'\n      element.style.textAlign = 'center'\n      element.style.opacity = '0.5'\n      element.style.outline = 'none'\n      element.style.zIndex = '999'\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button)\n      button.id = 'VRButton'\n      button.style.display = 'none'\n\n      // Query for session mode\n      navigator.xr!.isSessionSupported('immersive-vr').then((supported) => {\n        supported ? showEnterVR() : showWebXRNotFound()\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click()\n        }\n      })\n\n      return button\n    } else {\n      const message = document.createElement('a')\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:')\n        message.innerHTML = 'WEBXR NEEDS HTTPS' // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/'\n        message.innerHTML = 'WEBXR NOT AVAILABLE'\n      }\n\n      message.style.left = 'calc(50% - 90px)'\n      message.style.width = '180px'\n      message.style.textDecoration = 'none'\n\n      stylizeElement(message)\n\n      return message\n    }\n  }\n\n  static xrSessionIsGranted = false\n\n  static registerSessionGrantedListener(): void {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      ;(navigator as Navigator).xr!.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true\n      })\n    }\n  }\n}\n\nVRButton.registerSessionGrantedListener()\n\nexport { VRButton }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}