{"ast":null,"code":"import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from \"three\";\nfunction TubePainter() {\n  const BUFFER_SIZE = 1e6 * 3;\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  const geometry = new BufferGeometry();\n  geometry.setAttribute(\"position\", positions);\n  geometry.setAttribute(\"normal\", normals);\n  geometry.setAttribute(\"color\", colors);\n  geometry.drawRange.count = 0;\n  const material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false;\n  function getPoints(size2) {\n    const PI2 = Math.PI * 2;\n    const sides = 10;\n    const array = [];\n    const radius = 0.01 * size2;\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n    return array;\n  }\n  const vector1 = new Vector3();\n  const vector2 = new Vector3();\n  const vector3 = new Vector3();\n  const vector4 = new Vector3();\n  const color = new Color(16777215);\n  let size = 1;\n  function stroke(position1, position2, matrix12, matrix22) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    let count2 = geometry.drawRange.count;\n    const points = getPoints(size);\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i];\n      const vertex2 = points[(i + 1) % il];\n      vector1.copy(vertex1).applyMatrix4(matrix22).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix22).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix12).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix12).add(position1);\n      vector1.toArray(positions.array, (count2 + 0) * 3);\n      vector2.toArray(positions.array, (count2 + 1) * 3);\n      vector4.toArray(positions.array, (count2 + 2) * 3);\n      vector2.toArray(positions.array, (count2 + 3) * 3);\n      vector3.toArray(positions.array, (count2 + 4) * 3);\n      vector4.toArray(positions.array, (count2 + 5) * 3);\n      vector1.copy(vertex1).applyMatrix4(matrix22).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix22).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix12).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix12).normalize();\n      vector1.toArray(normals.array, (count2 + 0) * 3);\n      vector2.toArray(normals.array, (count2 + 1) * 3);\n      vector4.toArray(normals.array, (count2 + 2) * 3);\n      vector2.toArray(normals.array, (count2 + 3) * 3);\n      vector3.toArray(normals.array, (count2 + 4) * 3);\n      vector4.toArray(normals.array, (count2 + 5) * 3);\n      color.toArray(colors.array, (count2 + 0) * 3);\n      color.toArray(colors.array, (count2 + 1) * 3);\n      color.toArray(colors.array, (count2 + 2) * 3);\n      color.toArray(colors.array, (count2 + 3) * 3);\n      color.toArray(colors.array, (count2 + 4) * 3);\n      color.toArray(colors.array, (count2 + 5) * 3);\n      count2 += 6;\n    }\n    geometry.drawRange.count = count2;\n  }\n  const up = new Vector3(0, 1, 0);\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const matrix1 = new Matrix4();\n  const matrix2 = new Matrix4();\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n  function setSize(value) {\n    size = value;\n  }\n  let count = 0;\n  function update() {\n    const start = count;\n    const end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n  return {\n    mesh,\n    moveTo,\n    lineTo,\n    setSize,\n    update\n  };\n}\nexport { TubePainter };","map":{"version":3,"names":["TubePainter","BUFFER_SIZE","positions","BufferAttribute","Float32Array","usage","DynamicDrawUsage","normals","colors","geometry","BufferGeometry","setAttribute","drawRange","count","material","MeshStandardMaterial","vertexColors","mesh","Mesh","frustumCulled","getPoints","size2","PI2","Math","PI","sides","array","radius","i","angle","push","Vector3","sin","cos","vector1","vector2","vector3","vector4","color","Color","size","stroke","position1","position2","matrix12","matrix22","distanceToSquared","count2","points","il","length","vertex1","vertex2","copy","applyMatrix4","add","toArray","normalize","up","point1","point2","matrix1","Matrix4","matrix2","moveTo","position","lookAt","lineTo","setSize","value","update","start","end","updateRange","offset","needsUpdate"],"sources":["D:\\valentines_website\\node_modules\\src\\misc\\TubePainter.js"],"sourcesContent":["import {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  DynamicDrawUsage,\n  Matrix4,\n  Mesh,\n  MeshStandardMaterial,\n  Vector3,\n} from 'three'\n\nfunction TubePainter() {\n  const BUFFER_SIZE = 1000000 * 3\n\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3)\n  positions.usage = DynamicDrawUsage\n\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3)\n  normals.usage = DynamicDrawUsage\n\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3)\n  colors.usage = DynamicDrawUsage\n\n  const geometry = new BufferGeometry()\n  geometry.setAttribute('position', positions)\n  geometry.setAttribute('normal', normals)\n  geometry.setAttribute('color', colors)\n  geometry.drawRange.count = 0\n\n  const material = new MeshStandardMaterial({\n    vertexColors: true,\n  })\n\n  const mesh = new Mesh(geometry, material)\n  mesh.frustumCulled = false\n\n  //\n\n  function getPoints(size) {\n    const PI2 = Math.PI * 2\n\n    const sides = 10\n    const array = []\n    const radius = 0.01 * size\n\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * PI2\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0))\n    }\n\n    return array\n  }\n\n  //\n\n  const vector1 = new Vector3()\n  const vector2 = new Vector3()\n  const vector3 = new Vector3()\n  const vector4 = new Vector3()\n\n  const color = new Color(0xffffff)\n  let size = 1\n\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return\n\n    let count = geometry.drawRange.count\n\n    const points = getPoints(size)\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i]\n      const vertex2 = points[(i + 1) % il]\n\n      // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2)\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2)\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1)\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1)\n\n      vector1.toArray(positions.array, (count + 0) * 3)\n      vector2.toArray(positions.array, (count + 1) * 3)\n      vector4.toArray(positions.array, (count + 2) * 3)\n\n      vector2.toArray(positions.array, (count + 3) * 3)\n      vector3.toArray(positions.array, (count + 4) * 3)\n      vector4.toArray(positions.array, (count + 5) * 3)\n\n      // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize()\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize()\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize()\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize()\n\n      vector1.toArray(normals.array, (count + 0) * 3)\n      vector2.toArray(normals.array, (count + 1) * 3)\n      vector4.toArray(normals.array, (count + 2) * 3)\n\n      vector2.toArray(normals.array, (count + 3) * 3)\n      vector3.toArray(normals.array, (count + 4) * 3)\n      vector4.toArray(normals.array, (count + 5) * 3)\n\n      // colors\n\n      color.toArray(colors.array, (count + 0) * 3)\n      color.toArray(colors.array, (count + 1) * 3)\n      color.toArray(colors.array, (count + 2) * 3)\n\n      color.toArray(colors.array, (count + 3) * 3)\n      color.toArray(colors.array, (count + 4) * 3)\n      color.toArray(colors.array, (count + 5) * 3)\n\n      count += 6\n    }\n\n    geometry.drawRange.count = count\n  }\n\n  //\n\n  const up = new Vector3(0, 1, 0)\n\n  const point1 = new Vector3()\n  const point2 = new Vector3()\n\n  const matrix1 = new Matrix4()\n  const matrix2 = new Matrix4()\n\n  function moveTo(position) {\n    point1.copy(position)\n    matrix1.lookAt(point2, point1, up)\n\n    point2.copy(position)\n    matrix2.copy(matrix1)\n  }\n\n  function lineTo(position) {\n    point1.copy(position)\n    matrix1.lookAt(point2, point1, up)\n\n    stroke(point1, point2, matrix1, matrix2)\n\n    point2.copy(point1)\n    matrix2.copy(matrix1)\n  }\n\n  function setSize(value) {\n    size = value\n  }\n\n  //\n\n  let count = 0\n\n  function update() {\n    const start = count\n    const end = geometry.drawRange.count\n\n    if (start === end) return\n\n    positions.updateRange.offset = start * 3\n    positions.updateRange.count = (end - start) * 3\n    positions.needsUpdate = true\n\n    normals.updateRange.offset = start * 3\n    normals.updateRange.count = (end - start) * 3\n    normals.needsUpdate = true\n\n    colors.updateRange.offset = start * 3\n    colors.updateRange.count = (end - start) * 3\n    colors.needsUpdate = true\n\n    count = geometry.drawRange.count\n  }\n\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update,\n  }\n}\n\nexport { TubePainter }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}