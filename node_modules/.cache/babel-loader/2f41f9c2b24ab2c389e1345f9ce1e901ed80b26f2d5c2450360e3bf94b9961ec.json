{"ast":null,"code":"const MirrorShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    side: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform int side;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 p = vUv;\", \"\tif (side == 0){\", \"\t\tif (p.x > 0.5) p.x = 1.0 - p.x;\", \"\t}else if (side == 1){\", \"\t\tif (p.x < 0.5) p.x = 1.0 - p.x;\", \"\t}else if (side == 2){\", \"\t\tif (p.y < 0.5) p.y = 1.0 - p.y;\", \"\t}else if (side == 3){\", \"\t\tif (p.y > 0.5) p.y = 1.0 - p.y;\", \"\t} \", \"\tvec4 color = texture2D(tDiffuse, p);\", \"\tgl_FragColor = color;\", \"}\"].join(\"\\n\")\n};\nexport { MirrorShader };","map":{"version":3,"names":["MirrorShader","uniforms","tDiffuse","value","side","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\MirrorShader.ts"],"sourcesContent":["/**\n * Mirror Shader\n * Copies half the input to the other half\n *\n * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\n */\n\nexport const MirrorShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    side: { value: 1 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform int side;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec2 p = vUv;',\n    '\tif (side == 0){',\n    '\t\tif (p.x > 0.5) p.x = 1.0 - p.x;',\n    '\t}else if (side == 1){',\n    '\t\tif (p.x < 0.5) p.x = 1.0 - p.x;',\n    '\t}else if (side == 2){',\n    '\t\tif (p.y < 0.5) p.y = 1.0 - p.y;',\n    '\t}else if (side == 3){',\n    '\t\tif (p.y > 0.5) p.y = 1.0 - p.y;',\n    '\t} ',\n    '\tvec4 color = texture2D(tDiffuse, p);',\n    '\tgl_FragColor = color;',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":"AAOO,MAAMA,YAAA,GAAe;EAC1BC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,IAAA,EAAM;MAAED,KAAA,EAAO;IAAE;EACnB;EAEAE,YAAA,EAAc,CACZ,qBAEA,iBAEA,cACA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,+BACA,qBAEA,qBAEA,iBAEA,kBACA,oBACA,qCACA,0BACA,qCACA,0BACA,qCACA,0BACA,qCACA,OACA,yCACA,0BAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}