{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor({\n    renderer,\n    scene,\n    camera,\n    width,\n    height,\n    selects,\n    bouncing = false,\n    groundReflector\n  }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible(child => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport { SSRPass };","map":{"version":3,"names":["_SSRPass","Pass","constructor","renderer","scene","camera","width","height","selects","bouncing","groundReflector","clear","opacity","SSRShader","uniforms","value","output","maxDistance","thickness","tempColor","Color","_selects","selective","Array","isArray","Object","defineProperty","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","DepthTexture","type","UnsignedShortType","minFilter","NearestFilter","magFilter","WebGLRenderTarget","HalfFloatType","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","ShaderMaterial","assign","MAX_STEP","Math","sqrt","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","MeshNormalMaterial","metalnessOnMaterial","MeshBasicMaterial","color","metalnessOffMaterial","blurMaterial","SSRBlurShader","blurMaterial2","depthRenderMaterial","SSRDepthShader","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","SrcAlphaFactor","blendDst","OneMinusSrcAlphaFactor","blendEquation","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","dispose","render","writeBuffer","setRenderTarget","visible","doRender","renderOverride","renderMetalness","renderPass","OUTPUT","Default","NormalBlending","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize","SSRPass","__publicField"],"sources":["D:\\valentines_website\\node_modules\\src\\postprocessing\\SSRPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  NormalBlending,\n  DepthTexture,\n  SrcAlphaFactor,\n  OneMinusSrcAlphaFactor,\n  MeshNormalMaterial,\n  MeshBasicMaterial,\n  NearestFilter,\n  NoBlending,\n  ShaderMaterial,\n  UniformsUtils,\n  UnsignedShortType,\n  WebGLRenderTarget,\n  HalfFloatType,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SSRShader } from '../shaders/SSRShader'\nimport { SSRBlurShader } from '../shaders/SSRShader'\nimport { SSRDepthShader } from '../shaders/SSRShader'\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSRPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSR: 1,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n    Metalness: 7,\n  }\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.renderer = renderer\n    this.scene = scene\n    this.camera = camera\n    this.groundReflector = groundReflector\n\n    this.opacity = SSRShader.uniforms.opacity.value\n    this.output = 0\n\n    this.maxDistance = SSRShader.uniforms.maxDistance.value\n    this.thickness = SSRShader.uniforms.thickness.value\n\n    this.tempColor = new Color()\n\n    this._selects = selects\n    this.selective = Array.isArray(this._selects)\n    Object.defineProperty(this, 'selects', {\n      get() {\n        return this._selects\n      },\n      set(val) {\n        if (this._selects === val) return\n        this._selects = val\n        if (Array.isArray(val)) {\n          this.selective = true\n          this.ssrMaterial.defines.SELECTIVE = true\n          this.ssrMaterial.needsUpdate = true\n        } else {\n          this.selective = false\n          this.ssrMaterial.defines.SELECTIVE = false\n          this.ssrMaterial.needsUpdate = true\n        }\n      },\n    })\n\n    this._bouncing = bouncing\n    Object.defineProperty(this, 'bouncing', {\n      get() {\n        return this._bouncing\n      },\n      set(val) {\n        if (this._bouncing === val) return\n        this._bouncing = val\n        if (val) {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture\n        } else {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        }\n      },\n    })\n\n    this.blur = true\n\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION\n    Object.defineProperty(this, 'distanceAttenuation', {\n      get() {\n        return this._distanceAttenuation\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return\n        this._distanceAttenuation = val\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    this._fresnel = SSRShader.defines.FRESNEL\n    Object.defineProperty(this, 'fresnel', {\n      get() {\n        return this._fresnel\n      },\n      set(val) {\n        if (this._fresnel === val) return\n        this._fresnel = val\n        this.ssrMaterial.defines.FRESNEL = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK\n    Object.defineProperty(this, 'infiniteThick', {\n      get() {\n        return this._infiniteThick\n      },\n      set(val) {\n        if (this._infiniteThick === val) return\n        this._infiniteThick = val\n        this.ssrMaterial.defines.INFINITE_THICK = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    // beauty render target with depth buffer\n\n    const depthTexture = new DepthTexture()\n    depthTexture.type = UnsignedShortType\n    depthTexture.minFilter = NearestFilter\n    depthTexture.magFilter = NearestFilter\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true,\n    })\n\n    //for bouncing\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n\n    // normal render target\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n\n    // metalness render target\n\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n\n    // ssr render target\n\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n\n    this.blurRenderTarget = this.ssrRenderTarget.clone()\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone()\n    // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n    // ssr material\n\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height),\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssrMaterial.defines.SELECTIVE = this.selective\n    this.ssrMaterial.needsUpdate = true\n    this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture\n    this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture\n    this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness\n    this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // metalnessOn material\n\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: 'white',\n    })\n\n    // metalnessOff material\n\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: 'black',\n    })\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // blur material 2\n\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader,\n    })\n    this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n    this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height)\n\n    // // blur material 3\n\n    // this.blurMaterial3 = new ShaderMaterial({\n    //   defines: Object.assign({}, SSRBlurShader.defines),\n    //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    //   vertexShader: SSRBlurShader.vertexShader,\n    //   fragmentShader: SSRBlurShader.fragmentShader\n    // });\n    // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n    // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation,\n      // premultipliedAlpha:true,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.prevRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.metalnessRenderTarget.dispose()\n    this.ssrRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n    this.blurRenderTarget2.dispose()\n    // this.blurRenderTarget3.dispose();\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.metalnessOnMaterial.dispose()\n    this.metalnessOffMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.blurMaterial2.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty and depth\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    if (this.groundReflector) {\n      this.groundReflector.visible = false\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera)\n      this.groundReflector.visible = true\n    }\n\n    renderer.render(this.scene, this.camera)\n    if (this.groundReflector) this.groundReflector.visible = false\n\n    // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0)\n\n    // render metalnesses\n\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0)\n    }\n\n    // render SSR\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget)\n\n    // render blur\n\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2)\n      // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    }\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n        }\n\n        break\n      case SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n        else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n        }\n\n        break\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial\n      } else {\n        child.material = this.metalnessOffMaterial\n      }\n    })\n    renderer.render(this.scene, this.camera)\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial\n    })\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height)\n    this.ssrMaterial.needsUpdate = true\n    this.beautyRenderTarget.setSize(width, height)\n    this.prevRenderTarget.setSize(width, height)\n    this.ssrRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.metalnessRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n    this.blurRenderTarget2.setSize(width, height)\n    // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height)\n  }\n}\n\nexport { SSRPass }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}