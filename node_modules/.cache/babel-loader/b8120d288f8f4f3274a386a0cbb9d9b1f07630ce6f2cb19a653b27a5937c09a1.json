{"ast":null,"code":"import { TextureLoader, Texture } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof Texture) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof Texture) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = useMemo(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\nexport { IsObject, useTexture };","map":{"version":3,"names":["TextureLoader","Texture","useThree","useLoader","useLayoutEffect","useEffect","useMemo","IsObject","url","Object","Array","isArray","useTexture","input","onLoad","gl","state","textures","values","textureArray","forEach","texture","initTexture","mappedTextures","keyed","i","key","preload","clear"],"sources":["D:/valentines_website/node_modules/@react-three/drei/core/useTexture.js"],"sourcesContent":["import { TextureLoader, Texture } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof Texture) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof Texture) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = useMemo(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,OAAO;AAC9C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AACxD,SAASC,eAAe,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAE3D,MAAMC,QAAQ,GAAGC,GAAG,IAAIA,GAAG,KAAKC,MAAM,CAACD,GAAG,CAAC,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,IAAI,OAAOA,GAAG,KAAK,UAAU;AAC/F,SAASI,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACjC,MAAMC,EAAE,GAAGb,QAAQ,CAACc,KAAK,IAAIA,KAAK,CAACD,EAAE,CAAC;EACtC,MAAME,QAAQ,GAAGd,SAAS,CAACH,aAAa,EAAEO,QAAQ,CAACM,KAAK,CAAC,GAAGJ,MAAM,CAACS,MAAM,CAACL,KAAK,CAAC,GAAGA,KAAK,CAAC;EACzFT,eAAe,CAAC,MAAM;IACpBU,MAAM,IAAI,IAAI,IAAIA,MAAM,CAACG,QAAQ,CAAC;EACpC,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;;EAEZ;EACA;EACA;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,aAAa,IAAIU,EAAE,EAAE;MACvB,IAAII,YAAY,GAAG,EAAE;MACrB,IAAIT,KAAK,CAACC,OAAO,CAACM,QAAQ,CAAC,EAAE;QAC3BE,YAAY,GAAGF,QAAQ;MACzB,CAAC,MAAM,IAAIA,QAAQ,YAAYhB,OAAO,EAAE;QACtCkB,YAAY,GAAG,CAACF,QAAQ,CAAC;MAC3B,CAAC,MAAM,IAAIV,QAAQ,CAACU,QAAQ,CAAC,EAAE;QAC7BE,YAAY,GAAGV,MAAM,CAACS,MAAM,CAACD,QAAQ,CAAC;MACxC;MACAE,YAAY,CAACC,OAAO,CAACC,OAAO,IAAI;QAC9B,IAAIA,OAAO,YAAYpB,OAAO,EAAE;UAC9Bc,EAAE,CAACO,WAAW,CAACD,OAAO,CAAC;QACzB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACN,EAAE,EAAEE,QAAQ,CAAC,CAAC;EAClB,MAAMM,cAAc,GAAGjB,OAAO,CAAC,MAAM;IACnC,IAAIC,QAAQ,CAACM,KAAK,CAAC,EAAE;MACnB,MAAMW,KAAK,GAAG,CAAC,CAAC;MAChB,IAAIC,CAAC,GAAG,CAAC;MACT,KAAK,MAAMC,GAAG,IAAIb,KAAK,EAAEW,KAAK,CAACE,GAAG,CAAC,GAAGT,QAAQ,CAACQ,CAAC,EAAE,CAAC;MACnD,OAAOD,KAAK;IACd,CAAC,MAAM;MACL,OAAOP,QAAQ;IACjB;EACF,CAAC,EAAE,CAACJ,KAAK,EAAEI,QAAQ,CAAC,CAAC;EACrB,OAAOM,cAAc;AACvB;AACAX,UAAU,CAACe,OAAO,GAAGnB,GAAG,IAAIL,SAAS,CAACwB,OAAO,CAAC3B,aAAa,EAAEQ,GAAG,CAAC;AACjEI,UAAU,CAACgB,KAAK,GAAGf,KAAK,IAAIV,SAAS,CAACyB,KAAK,CAAC5B,aAAa,EAAEa,KAAK,CAAC;AAEjE,SAASN,QAAQ,EAAEK,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}