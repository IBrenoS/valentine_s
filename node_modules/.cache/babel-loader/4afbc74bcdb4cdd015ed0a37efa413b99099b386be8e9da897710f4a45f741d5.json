{"ast":null,"code":"import { Color } from \"three\";\nconst LuminosityHighPassShader = {\n  shaderID: \"luminosityHighPass\",\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    luminosityThreshold: {\n      value: 1\n    },\n    smoothWidth: {\n      value: 1\n    },\n    defaultColor: {\n      value: new Color(0)\n    },\n    defaultOpacity: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 defaultColor;\", \"uniform float defaultOpacity;\", \"uniform float luminosityThreshold;\", \"uniform float smoothWidth;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 texel = texture2D( tDiffuse, vUv );\", \"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"\tfloat v = dot( texel.xyz, luma );\", \"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\", \"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\", \"\tgl_FragColor = mix( outputColor, texel, alpha );\", \"}\"].join(\"\\n\")\n};\nexport { LuminosityHighPassShader };","map":{"version":3,"names":["LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\LuminosityHighPassShader.ts"],"sourcesContent":["import { Color } from 'three'\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nexport const LuminosityHighPassShader = {\n  shaderID: 'luminosityHighPass',\n\n  uniforms: {\n    tDiffuse: { value: null },\n    luminosityThreshold: { value: 1.0 },\n    smoothWidth: { value: 1.0 },\n    defaultColor: { value: new Color(0x000000) },\n    defaultOpacity: { value: 0.0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform vec3 defaultColor;',\n    'uniform float defaultOpacity;',\n    'uniform float luminosityThreshold;',\n    'uniform float smoothWidth;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec4 texel = texture2D( tDiffuse, vUv );',\n\n    '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );',\n\n    '\tfloat v = dot( texel.xyz, luma );',\n\n    '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );',\n\n    '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );',\n\n    '\tgl_FragColor = mix( outputColor, texel, alpha );',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":";AAOO,MAAMA,wBAAA,GAA2B;EACtCC,QAAA,EAAU;EAEVC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,mBAAA,EAAqB;MAAED,KAAA,EAAO;IAAI;IAClCE,WAAA,EAAa;MAAEF,KAAA,EAAO;IAAI;IAC1BG,YAAA,EAAc;MAAEH,KAAA,EAAO,IAAII,KAAA,CAAM,CAAQ;IAAE;IAC3CC,cAAA,EAAgB;MAAEL,KAAA,EAAO;IAAI;EAC/B;EAEAM,YAAA,EAAc,CACZ,qBAEA,iBAEA,cAEA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,+BACA,8BACA,iCACA,sCACA,8BAEA,qBAEA,iBAEA,6CAEA,6CAEA,sCAEA,iEAEA,2FAEA,qDAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}