{"ast":null,"code":"import { Vector2 } from \"three\";\nconst DotScreenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tSize: {\n      value: new Vector2(256, 256)\n    },\n    center: {\n      value: new Vector2(0.5, 0.5)\n    },\n    angle: {\n      value: 1.57\n    },\n    scale: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec2 center;\", \"uniform float angle;\", \"uniform float scale;\", \"uniform vec2 tSize;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"float pattern() {\", \"\tfloat s = sin( angle ), c = cos( angle );\", \"\tvec2 tex = vUv * tSize - center;\", \"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\", \"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\", \"}\", \"void main() {\", \"\tvec4 color = texture2D( tDiffuse, vUv );\", \"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\", \"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\", \"}\"].join(\"\\n\")\n};\nexport { DotScreenShader };","map":{"version":3,"names":["DotScreenShader","uniforms","tDiffuse","value","tSize","Vector2","center","angle","scale","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\DotScreenShader.ts"],"sourcesContent":["import { Vector2 } from 'three'\n\n/**\n * Dot screen shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nexport const DotScreenShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    tSize: { value: new Vector2(256, 256) },\n    center: { value: new Vector2(0.5, 0.5) },\n    angle: { value: 1.57 },\n    scale: { value: 1.0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform vec2 center;',\n    'uniform float angle;',\n    'uniform float scale;',\n    'uniform vec2 tSize;',\n\n    'uniform sampler2D tDiffuse;',\n\n    'varying vec2 vUv;',\n\n    'float pattern() {',\n\n    '\tfloat s = sin( angle ), c = cos( angle );',\n\n    '\tvec2 tex = vUv * tSize - center;',\n    '\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;',\n\n    '\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;',\n\n    '}',\n\n    'void main() {',\n\n    '\tvec4 color = texture2D( tDiffuse, vUv );',\n\n    '\tfloat average = ( color.r + color.g + color.b ) / 3.0;',\n\n    '\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":";AAQO,MAAMA,eAAA,GAAkB;EAC7BC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,KAAA,EAAO;MAAED,KAAA,EAAO,IAAIE,OAAA,CAAQ,KAAK,GAAG;IAAE;IACtCC,MAAA,EAAQ;MAAEH,KAAA,EAAO,IAAIE,OAAA,CAAQ,KAAK,GAAG;IAAE;IACvCE,KAAA,EAAO;MAAEJ,KAAA,EAAO;IAAK;IACrBK,KAAA,EAAO;MAAEL,KAAA,EAAO;IAAI;EACtB;EAEAM,YAAA,EAAc,CACZ,qBAEA,iBAEA,cACA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,wBACA,wBACA,wBACA,uBAEA,+BAEA,qBAEA,qBAEA,8CAEA,qCACA,+EAEA,sDAEA,KAEA,iBAEA,6CAEA,2DAEA,8EAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}