{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport { SSAOPass };","map":{"version":3,"names":["_SSAOPass","Pass","constructor","scene","camera","width","height","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","DepthTexture","format","DepthStencilFormat","type","UnsignedInt248Type","beautyRenderTarget","WebGLRenderTarget","normalRenderTarget","minFilter","NearestFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","SSAOShader","console","error","ssaoMaterial","ShaderMaterial","defines","Object","assign","uniforms","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","MeshNormalMaterial","blurMaterial","SSAOBlurShader","depthRenderMaterial","SSAODepthShader","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","Color","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","LuminanceFormat","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","CustomBlending","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","Vector3","x","Math","random","y","z","normalize","scale","MathUtils","lerp","multiplyScalar","push","SimplexNoise","simplex","size","data","Float32Array","noise3d","DataTexture","RedFormat","FloatType","wrapS","RepeatWrapping","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","SSAOPass","__publicField"],"sources":["D:\\valentines_website\\node_modules\\src\\postprocessing\\SSAOPass.js"],"sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DataTexture,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  FloatType,\n  MathUtils,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RedFormat,\n  LuminanceFormat,\n  DepthStencilFormat,\n  UnsignedInt248Type,\n  RepeatWrapping,\n  ShaderMaterial,\n  UniformsUtils,\n  Vector3,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SimplexNoise } from '../math/SimplexNoise'\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader'\n\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSAOPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSAO: 1,\n    Blur: 2,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n  }\n\n  constructor(scene, camera, width, height) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.camera = camera\n    this.scene = scene\n\n    this.kernelRadius = 8\n    this.kernelSize = 32\n    this.kernel = []\n    this.noiseTexture = null\n    this.output = 0\n\n    this.minDistance = 0.005\n    this.maxDistance = 0.1\n\n    this._visibilityCache = new Map()\n\n    //\n\n    this.generateSampleKernel()\n    this.generateRandomKernelRotations()\n\n    // beauty render target\n\n    const depthTexture = new DepthTexture()\n    depthTexture.format = DepthStencilFormat\n    depthTexture.type = UnsignedInt248Type\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture,\n    })\n\n    // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    this.blurRenderTarget = this.ssaoRenderTarget.clone()\n\n    // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.')\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.ssaoRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat\n\n    // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility()\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    this.restoreVisibility()\n\n    // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget)\n\n    // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = CustomBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.beautyRenderTarget.setSize(width, height)\n    this.ssaoRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize\n    const kernel = this.kernel\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3()\n      sample.x = Math.random() * 2 - 1\n      sample.y = Math.random() * 2 - 1\n      sample.z = Math.random()\n\n      sample.normalize()\n\n      let scale = i / kernelSize\n      scale = MathUtils.lerp(0.1, 1, scale * scale)\n      sample.multiplyScalar(scale)\n\n      kernel.push(sample)\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.')\n    }\n\n    const simplex = new SimplexNoise()\n\n    const size = width * height\n    const data = new Float32Array(size)\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1\n      const y = Math.random() * 2 - 1\n      const z = 0\n\n      data[i] = simplex.noise3d(x, y, z)\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType)\n    this.noiseTexture.wrapS = RepeatWrapping\n    this.noiseTexture.wrapT = RepeatWrapping\n    this.noiseTexture.needsUpdate = true\n  }\n\n  overrideVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      cache.set(object, object.visible)\n\n      if (object.isPoints || object.isLine) object.visible = false\n    })\n  }\n\n  restoreVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      const visible = cache.get(object)\n      object.visible = visible\n    })\n\n    cache.clear()\n  }\n}\n\nexport { SSAOPass }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}