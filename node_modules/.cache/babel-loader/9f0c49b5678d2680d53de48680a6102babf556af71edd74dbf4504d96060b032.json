{"ast":null,"code":"const BrightnessContrastShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    brightness: {\n      value: 0\n    },\n    contrast: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float brightness;\", \"uniform float contrast;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\", \"\tgl_FragColor.rgb += brightness;\", \"\tif (contrast > 0.0) {\", \"\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\", \"\t} else {\", \"\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { BrightnessContrastShader };","map":{"version":3,"names":["BrightnessContrastShader","uniforms","tDiffuse","value","brightness","contrast","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\BrightnessContrastShader.ts"],"sourcesContent":["/**\n * Brightness and contrast adjustment\n * https://github.com/evanw/glfx.js\n * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\n\nexport const BrightnessContrastShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    brightness: { value: 0 },\n    contrast: { value: 0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform float brightness;',\n    'uniform float contrast;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tgl_FragColor = texture2D( tDiffuse, vUv );',\n\n    '\tgl_FragColor.rgb += brightness;',\n\n    '\tif (contrast > 0.0) {',\n    '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;',\n    '\t} else {',\n    '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;',\n    '\t}',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":"AAOO,MAAMA,wBAAA,GAA2B;EACtCC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,UAAA,EAAY;MAAED,KAAA,EAAO;IAAE;IACvBE,QAAA,EAAU;MAAEF,KAAA,EAAO;IAAE;EACvB;EAEAG,YAAA,EAAc,CACZ,qBAEA,iBAEA,cAEA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,+BACA,6BACA,2BAEA,qBAEA,iBAEA,+CAEA,oCAEA,0BACA,2EACA,aACA,2EACA,MAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}