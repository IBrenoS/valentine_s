{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, FloatType, HalfFloatType, DataTexture, RGFormat, RedFormat, RGBA_ASTC_6x6_Format } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_ZSTD, KHR_SUPERCOMPRESSION_NONE, KHR_DF_PRIMARIES_BT709, KHR_DF_TRANSFER_SRGB, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_UNSPECIFIED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK } from \"../libs/ktx-parse.js\";\nimport { ZSTDDecoder } from \"../libs/zstddec.js\";\nimport { CompressedCubeTexture } from \"../_polyfill/CompressedCubeTexture.js\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst LinearEncoding = 3e3;\nconst sRGBEncoding = 3001;\nconst NoColorSpace = \"\";\nconst DisplayP3ColorSpace = \"display-p3\";\nconst LinearDisplayP3ColorSpace = \"display-p3-linear\";\nconst LinearSRGBColorSpace = \"srgb-linear\";\nconst SRGBColorSpace = \"srgb\";\nconst _taskCache = /* @__PURE__ */new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n        const body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: \"init\",\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      faces,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdFlags\n    } = transcodeResult;\n    if (type === \"error\") return Promise.reject(error);\n    let texture;\n    if (container.faceCount === 6) {\n      texture = new CompressedCubeTexture(faces, format, UnsignedByteType);\n    } else {\n      const mipmaps = faces[0].mipmaps;\n      texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    }\n    texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    const colorSpace = parseColorSpace(container);\n    if (\"colorSpace\" in texture) texture.colorSpace = colorSpace;else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createRawTexture(container);\n    }\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: \"transcode\",\n        buffer,\n        taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data, container));\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n};\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _KTX2Loader.EngineFormat;\n  const TranscoderFormat = _KTX2Loader.TranscoderFormat;\n  const BasisFormat = _KTX2Loader.BasisFormat;\n  self.addEventListener(\"message\", function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const {\n              faces,\n              buffers,\n              width,\n              height,\n              hasAlpha,\n              format,\n              dfdFlags\n            } = transcode(message.buffer);\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              faces,\n              width,\n              height,\n              hasAlpha,\n              format,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layerCount = ktx2File.getLayers() || 1;\n    const levelCount = ktx2File.getLevels();\n    const faceCount = ktx2File.getFaces();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levelCount) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    const faces = [];\n    const buffers = [];\n    for (let face = 0; face < faceCount; face++) {\n      const mipmaps = [];\n      for (let mip = 0; mip < levelCount; mip++) {\n        const layerMips = [];\n        let mipWidth, mipHeight;\n        for (let layer = 0; layer < layerCount; layer++) {\n          const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face);\n          if (face === 0 && mip === 0 && layer === 0 && (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)) {\n            console.warn(\"THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.\");\n          }\n          if (levelCount > 1) {\n            mipWidth = levelInfo.origWidth;\n            mipHeight = levelInfo.origHeight;\n          } else {\n            mipWidth = levelInfo.width;\n            mipHeight = levelInfo.height;\n          }\n          const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n          const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1);\n          if (!status) {\n            cleanup();\n            throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n          }\n          layerMips.push(dst);\n        }\n        const mipData = concat(layerMips);\n        mipmaps.push({\n          data: mipData,\n          width: mipWidth,\n          height: mipHeight\n        });\n        buffers.push(mipData.buffer);\n      }\n      faces.push({\n        mipmaps,\n        width,\n        height,\n        format: engineFormat\n      });\n    }\n    cleanup();\n    return {\n      faces,\n      buffers,\n      width,\n      height,\n      hasAlpha,\n      format: engineFormat,\n      dfdFlags\n    };\n  }\n  const FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    if (arrays.length === 1) return arrays[0];\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n});\nconst UNCOMPRESSED_FORMATS = /* @__PURE__ */new Set([RGBAFormat, RGFormat, RedFormat]);\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType\n};\nasync function createRawTexture(container) {\n  const {\n    vkFormat\n  } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  let zstd;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd2 = new ZSTDDecoder();\n        await zstd2.init();\n        resolve(zstd2);\n      });\n    }\n    zstd = await _zstd;\n  }\n  const mipmaps = [];\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex);\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex);\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0;\n    const level = container.levels[levelIndex];\n    let levelData;\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData;\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength);\n    } else {\n      throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n    }\n    let data;\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n    } else {\n      data = levelData;\n    }\n    mipmaps.push({\n      data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth\n    });\n  }\n  let texture;\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture = container.pixelDepth === 0 ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight) : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth);\n  } else {\n    if (container.pixelDepth > 0) throw new Error(\"THREE.KTX2Loader: Unsupported pixelDepth.\");\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight);\n  }\n  texture.mipmaps = mipmaps;\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.needsUpdate = true;\n  const colorSpace = parseColorSpace(container);\n  if (\"colorSpace\" in texture) texture.colorSpace = colorSpace;else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n  return Promise.resolve(texture);\n}\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0];\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace;\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`);\n    return NoColorSpace;\n  }\n}\nexport { KTX2Loader };","map":{"version":3,"names":["LinearEncoding","sRGBEncoding","NoColorSpace","DisplayP3ColorSpace","LinearDisplayP3ColorSpace","LinearSRGBColorSpace","SRGBColorSpace","_taskCache","WeakMap","_activeLoaders","_zstd","_KTX2Loader","Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","WorkerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","FileLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","faces","width","height","format","error","dfdFlags","reject","faceCount","CompressedCubeTexture","UnsignedByteType","mipmaps","layerCount","CompressedArrayTexture","CompressedTexture","minFilter","length","LinearFilter","LinearMipmapLinearFilter","magFilter","generateMipmaps","needsUpdate","colorSpace","parseColorSpace","encoding","premultiplyAlpha","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","Uint8Array","vkFormat","VK_FORMAT_UNDEFINED","createRawTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","KTX2Loader","__publicField","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","BasisModule","self","addEventListener","message","buffers","hasAlpha","transcode","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","push","mipData","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","i","opt","includes","isPowerOfTwo","value","arrays","totalByteLength","array","byteLength","result","byteOffset","UNCOMPRESSED_FORMATS","Set","RGFormat","RedFormat","FORMAT_MAP","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","RGBA_ASTC_6x6_Format","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","TYPE_MAP","FloatType","HalfFloatType","zstd","supercompressionScheme","KHR_SUPERCOMPRESSION_ZSTD","zstd2","ZSTDDecoder","levelIndex","levels","levelWidth","Math","max","pixelWidth","levelHeight","pixelHeight","levelDepth","pixelDepth","level","levelData","KHR_SUPERCOMPRESSION_NONE","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array","depth","DataTexture","Data3DTexture","dfd","dataFormatDescriptor","colorPrimaries","KHR_DF_PRIMARIES_BT709","transferFunction","KHR_DF_TRANSFER_SRGB","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_UNSPECIFIED"],"sources":["D:\\valentines_website\\node_modules\\src\\loaders\\KTX2Loader.js"],"sourcesContent":["/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport {\n  CompressedTexture,\n  DataTexture,\n  FileLoader,\n  FloatType,\n  HalfFloatType,\n  LinearFilter,\n  LinearMipmapLinearFilter,\n  Loader,\n  RedFormat,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format,\n  RGBA_ASTC_4x4_Format,\n  RGBA_ASTC_6x6_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGBAFormat,\n  RGFormat,\n  UnsignedByteType,\n} from 'three'\nimport { WorkerPool } from '../utils/WorkerPool'\nimport {\n  read,\n  KHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n  KHR_DF_TRANSFER_SRGB,\n  KHR_SUPERCOMPRESSION_NONE,\n  KHR_SUPERCOMPRESSION_ZSTD,\n  VK_FORMAT_UNDEFINED,\n  VK_FORMAT_R16_SFLOAT,\n  VK_FORMAT_R16G16_SFLOAT,\n  VK_FORMAT_R16G16B16A16_SFLOAT,\n  VK_FORMAT_R32_SFLOAT,\n  VK_FORMAT_R32G32_SFLOAT,\n  VK_FORMAT_R32G32B32A32_SFLOAT,\n  VK_FORMAT_R8_SRGB,\n  VK_FORMAT_R8_UNORM,\n  VK_FORMAT_R8G8_SRGB,\n  VK_FORMAT_R8G8_UNORM,\n  VK_FORMAT_R8G8B8A8_SRGB,\n  VK_FORMAT_R8G8B8A8_UNORM,\n  VK_FORMAT_ASTC_6x6_SRGB_BLOCK,\n  VK_FORMAT_ASTC_6x6_UNORM_BLOCK,\n  KHR_DF_PRIMARIES_UNSPECIFIED,\n  KHR_DF_PRIMARIES_BT709,\n  KHR_DF_PRIMARIES_DISPLAYP3,\n} from '../libs/ktx-parse'\nimport { ZSTDDecoder } from '../libs/zstddec'\nimport { CompressedCubeTexture } from '../_polyfill/CompressedCubeTexture'\nimport { CompressedArrayTexture } from '../_polyfill/CompressedArrayTexture'\nimport { Data3DTexture } from '../_polyfill/Data3DTexture'\n\nconst LinearEncoding = 3000\nconst sRGBEncoding = 3001\n\nconst NoColorSpace = ''\nconst DisplayP3ColorSpace = 'display-p3'\nconst LinearDisplayP3ColorSpace = 'display-p3-linear'\nconst LinearSRGBColorSpace = 'srgb-linear'\nconst SRGBColorSpace = 'srgb'\n\nconst _taskCache = new WeakMap()\n\nlet _activeLoaders = 0\n\nlet _zstd\n\nclass KTX2Loader extends Loader {\n  /* CONSTANTS */\n\n  static BasisFormat = {\n    ETC1S: 0,\n    UASTC_4x4: 1,\n  }\n\n  static TranscoderFormat = {\n    ETC1: 0,\n    ETC2: 1,\n    BC1: 2,\n    BC3: 3,\n    BC4: 4,\n    BC5: 5,\n    BC7_M6_OPAQUE_ONLY: 6,\n    BC7_M5: 7,\n    PVRTC1_4_RGB: 8,\n    PVRTC1_4_RGBA: 9,\n    ASTC_4x4: 10,\n    ATC_RGB: 11,\n    ATC_RGBA_INTERPOLATED_ALPHA: 12,\n    RGBA32: 13,\n    RGB565: 14,\n    BGR565: 15,\n    RGBA4444: 16,\n  }\n\n  static EngineFormat = {\n    RGBAFormat: RGBAFormat,\n    RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n    RGBA_BPTC_Format: RGBA_BPTC_Format,\n    RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n    RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n    RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n    RGB_ETC1_Format: RGB_ETC1_Format,\n    RGB_ETC2_Format: RGB_ETC2_Format,\n    RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n    RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,\n  }\n\n  /* WEB WORKER */\n\n  static BasisWorker = function () {\n    let config\n    let transcoderPending\n    let BasisModule\n\n    const EngineFormat = KTX2Loader.EngineFormat\n    const TranscoderFormat = KTX2Loader.TranscoderFormat\n    const BasisFormat = KTX2Loader.BasisFormat\n\n    self.addEventListener('message', function (e) {\n      const message = e.data\n\n      switch (message.type) {\n        case 'init':\n          config = message.config\n          init(message.transcoderBinary)\n          break\n\n        case 'transcode':\n          transcoderPending.then(() => {\n            try {\n              const { faces, buffers, width, height, hasAlpha, format, dfdFlags } = transcode(message.buffer)\n\n              self.postMessage(\n                { type: 'transcode', id: message.id, faces, width, height, hasAlpha, format, dfdFlags },\n                buffers,\n              )\n            } catch (error) {\n              console.error(error)\n\n              self.postMessage({ type: 'error', id: message.id, error: error.message })\n            }\n          })\n          break\n      }\n    })\n\n    function init(wasmBinary) {\n      transcoderPending = new Promise((resolve) => {\n        BasisModule = { wasmBinary, onRuntimeInitialized: resolve }\n        BASIS(BasisModule)\n      }).then(() => {\n        BasisModule.initializeBasis()\n\n        if (BasisModule.KTX2File === undefined) {\n          console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.')\n        }\n      })\n    }\n\n    function transcode(buffer) {\n      const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer))\n\n      function cleanup() {\n        ktx2File.close()\n        ktx2File.delete()\n      }\n\n      if (!ktx2File.isValid()) {\n        cleanup()\n        throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file')\n      }\n\n      const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S\n      const width = ktx2File.getWidth()\n      const height = ktx2File.getHeight()\n      const layerCount = ktx2File.getLayers() || 1\n      const levelCount = ktx2File.getLevels()\n      const faceCount = ktx2File.getFaces()\n      const hasAlpha = ktx2File.getHasAlpha()\n      const dfdFlags = ktx2File.getDFDFlags()\n\n      const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha)\n\n      if (!width || !height || !levelCount) {\n        cleanup()\n        throw new Error('THREE.KTX2Loader:\tInvalid texture')\n      }\n\n      if (!ktx2File.startTranscoding()) {\n        cleanup()\n        throw new Error('THREE.KTX2Loader: .startTranscoding failed')\n      }\n\n      const faces = []\n      const buffers = []\n\n      for (let face = 0; face < faceCount; face++) {\n        const mipmaps = []\n\n        for (let mip = 0; mip < levelCount; mip++) {\n          const layerMips = []\n\n          let mipWidth, mipHeight\n\n          for (let layer = 0; layer < layerCount; layer++) {\n            const levelInfo = ktx2File.getImageLevelInfo(mip, layer, face)\n\n            if (\n              face === 0 &&\n              mip === 0 &&\n              layer === 0 &&\n              (levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0)\n            ) {\n              console.warn('THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.')\n            }\n\n            if (levelCount > 1) {\n              mipWidth = levelInfo.origWidth\n              mipHeight = levelInfo.origHeight\n            } else {\n              // Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n              // mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n              // See mrdoob/three.js#25908.\n              mipWidth = levelInfo.width\n              mipHeight = levelInfo.height\n            }\n\n            const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat))\n            const status = ktx2File.transcodeImage(dst, mip, layer, face, transcoderFormat, 0, -1, -1)\n\n            if (!status) {\n              cleanup()\n              throw new Error('THREE.KTX2Loader: .transcodeImage failed.')\n            }\n\n            layerMips.push(dst)\n          }\n\n          const mipData = concat(layerMips)\n\n          mipmaps.push({ data: mipData, width: mipWidth, height: mipHeight })\n          buffers.push(mipData.buffer)\n        }\n\n        faces.push({ mipmaps, width, height, format: engineFormat })\n      }\n\n      cleanup()\n\n      return { faces, buffers, width, height, hasAlpha, format: engineFormat, dfdFlags }\n    }\n\n    //\n\n    // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n    // device capabilities, and texture dimensions. The list below ranks the formats separately\n    // for ETC1S and UASTC.\n    //\n    // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n    // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n    // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n    const FORMAT_OPTIONS = [\n      {\n        if: 'astcSupported',\n        basisFormat: [BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n        engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n        priorityETC1S: Infinity,\n        priorityUASTC: 1,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'bptcSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n        engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n        priorityETC1S: 3,\n        priorityUASTC: 2,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'dxtSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n        engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n        priorityETC1S: 4,\n        priorityUASTC: 5,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'etc2Supported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n        engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n        priorityETC1S: 1,\n        priorityUASTC: 3,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'etc1Supported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.ETC1],\n        engineFormat: [EngineFormat.RGB_ETC1_Format],\n        priorityETC1S: 2,\n        priorityUASTC: 4,\n        needsPowerOfTwo: false,\n      },\n      {\n        if: 'pvrtcSupported',\n        basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n        transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n        engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n        priorityETC1S: 5,\n        priorityUASTC: 6,\n        needsPowerOfTwo: true,\n      },\n    ]\n\n    const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n      return a.priorityETC1S - b.priorityETC1S\n    })\n    const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n      return a.priorityUASTC - b.priorityUASTC\n    })\n\n    function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n      let transcoderFormat\n      let engineFormat\n\n      const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS\n\n      for (let i = 0; i < options.length; i++) {\n        const opt = options[i]\n\n        if (!config[opt.if]) continue\n        if (!opt.basisFormat.includes(basisFormat)) continue\n        if (hasAlpha && opt.transcoderFormat.length < 2) continue\n        if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue\n\n        transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0]\n        engineFormat = opt.engineFormat[hasAlpha ? 1 : 0]\n\n        return { transcoderFormat, engineFormat }\n      }\n\n      console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.')\n\n      transcoderFormat = TranscoderFormat.RGBA32\n      engineFormat = EngineFormat.RGBAFormat\n\n      return { transcoderFormat, engineFormat }\n    }\n\n    function isPowerOfTwo(value) {\n      if (value <= 2) return true\n\n      return (value & (value - 1)) === 0 && value !== 0\n    }\n\n    /** Concatenates N byte arrays. */\n    function concat(arrays) {\n      if (arrays.length === 1) return arrays[0]\n\n      let totalByteLength = 0\n\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i]\n        totalByteLength += array.byteLength\n      }\n\n      const result = new Uint8Array(totalByteLength)\n\n      let byteOffset = 0\n\n      for (let i = 0; i < arrays.length; i++) {\n        const array = arrays[i]\n        result.set(array, byteOffset)\n\n        byteOffset += array.byteLength\n      }\n\n      return result\n    }\n  }\n\n  constructor(manager) {\n    super(manager)\n\n    this.transcoderPath = ''\n    this.transcoderBinary = null\n    this.transcoderPending = null\n\n    this.workerPool = new WorkerPool()\n    this.workerSourceURL = ''\n    this.workerConfig = null\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn(\n        'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' +\n          ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.',\n      )\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path\n\n    return this\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num)\n\n    return this\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported:\n        renderer.extensions.has('WEBGL_compressed_texture_pvrtc') ||\n        renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n    }\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false\n    }\n\n    return this\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager)\n      jsLoader.setPath(this.transcoderPath)\n      jsLoader.setWithCredentials(this.withCredentials)\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js')\n\n      // Load transcoder WASM binary.\n      const binaryLoader = new FileLoader(this.manager)\n      binaryLoader.setPath(this.transcoderPath)\n      binaryLoader.setResponseType('arraybuffer')\n      binaryLoader.setWithCredentials(this.withCredentials)\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm')\n\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString()\n\n        const body = [\n          '/* constants */',\n          'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat),\n          'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat),\n          'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat),\n          '/* basis_transcoder.js */',\n          jsContent,\n          '/* worker */',\n          fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}')),\n        ].join('\\n')\n\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]))\n        this.transcoderBinary = binaryContent\n\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL)\n          const transcoderBinary = this.transcoderBinary.slice(0)\n\n          worker.postMessage({ type: 'init', config: this.workerConfig, transcoderBinary }, [transcoderBinary])\n\n          return worker\n        })\n      })\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n        console.warn(\n          'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' +\n            ' Use a single KTX2Loader instance, or call .dispose() on old instances.',\n        )\n      }\n\n      _activeLoaders++\n    }\n\n    return this.transcoderPending\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.')\n    }\n\n    const loader = new FileLoader(this.manager)\n\n    loader.setResponseType('arraybuffer')\n    loader.setWithCredentials(this.withCredentials)\n\n    loader.load(\n      url,\n      (buffer) => {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer)\n\n          return cachedTask.promise.then(onLoad).catch(onError)\n        }\n\n        this._createTexture(buffer)\n          .then((texture) => (onLoad ? onLoad(texture) : null))\n          .catch(onError)\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  _createTextureFrom(transcodeResult, container) {\n    const { faces, width, height, format, type, error, dfdFlags } = transcodeResult\n\n    if (type === 'error') return Promise.reject(error)\n\n    let texture\n\n    if (container.faceCount === 6) {\n      texture = new CompressedCubeTexture(faces, format, UnsignedByteType)\n    } else {\n      const mipmaps = faces[0].mipmaps\n\n      texture =\n        container.layerCount > 1\n          ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType)\n          : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType)\n    }\n\n    texture.minFilter = faces[0].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter\n    texture.magFilter = LinearFilter\n    texture.generateMipmaps = false\n    texture.needsUpdate = true\n\n    const colorSpace = parseColorSpace(container)\n    if ('colorSpace' in texture) texture.colorSpace = colorSpace\n    else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding\n\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED)\n\n    return texture\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer))\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createRawTexture(container)\n    }\n\n    //\n\n    const taskConfig = config\n    const texturePending = this.init()\n      .then(() => {\n        return this.workerPool.postMessage({ type: 'transcode', buffer, taskConfig: taskConfig }, [buffer])\n      })\n      .then((e) => this._createTextureFrom(e.data, container))\n\n    // Cache the task result.\n    _taskCache.set(buffer, { promise: texturePending })\n\n    return texturePending\n  }\n\n  dispose() {\n    this.workerPool.dispose()\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL)\n\n    _activeLoaders--\n\n    return this\n  }\n}\n\n//\n// Parsing for non-Basis textures. These textures are may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set([RGBAFormat, RGFormat, RedFormat])\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat,\n\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: RGBA_ASTC_6x6_Format,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: RGBA_ASTC_6x6_Format,\n}\n\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType,\n\n  [VK_FORMAT_ASTC_6x6_SRGB_BLOCK]: UnsignedByteType,\n  [VK_FORMAT_ASTC_6x6_UNORM_BLOCK]: UnsignedByteType,\n}\n\nasync function createRawTexture(container) {\n  const { vkFormat } = container\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.')\n  }\n\n  //\n\n  let zstd\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd = new ZSTDDecoder()\n        await zstd.init()\n        resolve(zstd)\n      })\n    }\n\n    zstd = await _zstd\n  }\n\n  //\n\n  const mipmaps = []\n\n  for (let levelIndex = 0; levelIndex < container.levels.length; levelIndex++) {\n    const levelWidth = Math.max(1, container.pixelWidth >> levelIndex)\n    const levelHeight = Math.max(1, container.pixelHeight >> levelIndex)\n    const levelDepth = container.pixelDepth ? Math.max(1, container.pixelDepth >> levelIndex) : 0\n\n    const level = container.levels[levelIndex]\n\n    let levelData\n\n    if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n      levelData = level.levelData\n    } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n      levelData = zstd.decode(level.levelData, level.uncompressedByteLength)\n    } else {\n      throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.')\n    }\n\n    let data\n\n    if (TYPE_MAP[vkFormat] === FloatType) {\n      data = new Float32Array(\n        levelData.buffer,\n        levelData.byteOffset,\n        levelData.byteLength / Float32Array.BYTES_PER_ELEMENT,\n      )\n    } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n      data = new Uint16Array(\n        levelData.buffer,\n        levelData.byteOffset,\n        levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT,\n      )\n    } else {\n      data = levelData\n    }\n\n    mipmaps.push({\n      data: data,\n      width: levelWidth,\n      height: levelHeight,\n      depth: levelDepth,\n    })\n  }\n\n  let texture\n\n  if (UNCOMPRESSED_FORMATS.has(FORMAT_MAP[vkFormat])) {\n    texture =\n      container.pixelDepth === 0\n        ? new DataTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight)\n        : new Data3DTexture(mipmaps[0].data, container.pixelWidth, container.pixelHeight, container.pixelDepth)\n  } else {\n    if (container.pixelDepth > 0) throw new Error('THREE.KTX2Loader: Unsupported pixelDepth.')\n\n    texture = new CompressedTexture(mipmaps, container.pixelWidth, container.pixelHeight)\n  }\n\n  texture.mipmaps = mipmaps\n\n  texture.type = TYPE_MAP[vkFormat]\n  texture.format = FORMAT_MAP[vkFormat]\n  texture.needsUpdate = true\n\n  const colorSpace = parseColorSpace(container)\n  if ('colorSpace' in texture) texture.colorSpace = colorSpace\n  else texture.encoding = colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding\n\n  //\n\n  return Promise.resolve(texture)\n}\n\nfunction parseColorSpace(container) {\n  const dfd = container.dataFormatDescriptor[0]\n\n  if (dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3) {\n    return dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace\n  } else if (dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED) {\n    return NoColorSpace\n  } else {\n    console.warn(`THREE.KTX2Loader: Unsupported color primaries, \"${dfd.colorPrimaries}\"`)\n    return NoColorSpace\n  }\n}\n\nexport { KTX2Loader }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}