{"ast":null,"code":"const KaleidoShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    sides: {\n      value: 6\n    },\n    angle: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float sides;\", \"uniform float angle;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 p = vUv - 0.5;\", \"\tfloat r = length(p);\", \"\tfloat a = atan(p.y, p.x) + angle;\", \"\tfloat tau = 2. * 3.1416 ;\", \"\ta = mod(a, tau/sides);\", \"\ta = abs(a - tau/sides/2.) ;\", \"\tp = r * vec2(cos(a), sin(a));\", \"\tvec4 color = texture2D(tDiffuse, p + 0.5);\", \"\tgl_FragColor = color;\", \"}\"].join(\"\\n\")\n};\nexport { KaleidoShader };","map":{"version":3,"names":["KaleidoShader","uniforms","tDiffuse","value","sides","angle","vertexShader","join","fragmentShader"],"sources":["D:\\valentines_website\\node_modules\\src\\shaders\\KaleidoShader.ts"],"sourcesContent":["/**\n * Kaleidoscope Shader\n * Radial reflection around center point\n * Ported from: http://pixelshaders.com/editor/\n * by Toby Schachman / http://tobyschachman.com/\n *\n * sides: number of reflections\n * angle: initial angle in radians\n */\n\nexport const KaleidoShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    sides: { value: 6.0 },\n    angle: { value: 0.0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform float sides;',\n    'uniform float angle;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec2 p = vUv - 0.5;',\n    '\tfloat r = length(p);',\n    '\tfloat a = atan(p.y, p.x) + angle;',\n    '\tfloat tau = 2. * 3.1416 ;',\n    '\ta = mod(a, tau/sides);',\n    '\ta = abs(a - tau/sides/2.) ;',\n    '\tp = r * vec2(cos(a), sin(a));',\n    '\tvec4 color = texture2D(tDiffuse, p + 0.5);',\n    '\tgl_FragColor = color;',\n\n    '}',\n  ].join('\\n'),\n}\n"],"mappings":"AAUO,MAAMA,aAAA,GAAgB;EAC3BC,QAAA,EAAU;IACRC,QAAA,EAAU;MAAEC,KAAA,EAAO;IAAK;IACxBC,KAAA,EAAO;MAAED,KAAA,EAAO;IAAI;IACpBE,KAAA,EAAO;MAAEF,KAAA,EAAO;IAAI;EACtB;EAEAG,YAAA,EAAc,CACZ,qBAEA,iBAEA,cACA,8EAEA,KACAC,IAAA,CAAK,IAAI;EAEXC,cAAA,EAAgB,CACd,+BACA,wBACA,wBAEA,qBAEA,iBAEA,wBACA,yBACA,sCACA,8BACA,2BACA,gCACA,kCACA,+CACA,0BAEA,KACAD,IAAA,CAAK,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}