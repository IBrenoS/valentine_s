{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Mesh, Points } from \"three\";\nconst _DRACOExporter = class {\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n    }\n    if (DracoEncoderModule === void 0) {\n      throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n    }\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n    }\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      const faces = geometry.getIndex();\n      if (faces !== null) {\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n        for (let i = 0; i < faces2.length; i++) {\n          faces2[i] = i;\n        }\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n      }\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute(\"normal\");\n        if (normals !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n        }\n      }\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute(\"uv\");\n        if (uvs !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      builder = new dracoEncoder.PointCloudBuilder();\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error(\"DRACOExporter: Unsupported object type.\");\n    }\n    const encodedData = new dracoEncoder.DracoInt8Array();\n    const encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n    if (options.encoderMethod !== void 0) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    }\n    if (options.quantization !== void 0) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== void 0) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n    let length;\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n    dracoEncoder.destroy(dracoObject);\n    if (length === 0) {\n      throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n    }\n    const outputData = new Int8Array(new ArrayBuffer(length));\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n};\nlet DRACOExporter = _DRACOExporter;\n// Encoder methods\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n// Geometry type\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n// Attribute type\n__publicField(DRACOExporter, \"INVALID\", -1);\n__publicField(DRACOExporter, \"POSITION\", 0);\n__publicField(DRACOExporter, \"NORMAL\", 1);\n__publicField(DRACOExporter, \"COLOR\", 2);\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n__publicField(DRACOExporter, \"GENERIC\", 4);\nexport { DRACOExporter };","map":{"version":3,"names":["_DRACOExporter","parse","object","options","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","BufferGeometry","isBufferGeometry","Error","DracoEncoderModule","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","Mesh","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","faces2","Uint32Array","Uint16Array","i","length","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","Points","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue","DRACOExporter","__publicField"],"sources":["D:\\valentines_website\\node_modules\\src\\exporters\\DRACOExporter.ts"],"sourcesContent":["import type { EncoderModule } from 'draco3d'\nimport { BufferGeometry, Mesh, Points } from 'three'\n\n/**\n * Export draco compressed files from threejs geometry objects.\n *\n * Draco files are compressed and usually are smaller than conventional 3D file formats.\n *\n * The exporter receives a options object containing\n *  - decodeSpeed, indicates how to tune the encoder regarding decode speed (0 gives better speed but worst quality)\n *  - encodeSpeed, indicates how to tune the encoder parameters (0 gives better speed but worst quality)\n *  - encoderMethod\n *  - quantization, indicates the presision of each type of data stored in the draco file in the order (POSITION, NORMAL, COLOR, TEX_COORD, GENERIC)\n *  - exportUvs\n *  - exportNormals\n */\n\ndeclare const DracoEncoderModule: () => EncoderModule\n\nclass DRACOExporter {\n  // Encoder methods\n\n  public static MESH_EDGEBREAKER_ENCODING = 1\n  public static MESH_SEQUENTIAL_ENCODING = 0\n\n  // Geometry type\n\n  public static POINT_CLOUD = 0\n  public static TRIANGULAR_MESH = 1\n\n  // Attribute type\n  public static INVALID = -1\n  public static POSITION = 0\n  public static NORMAL = 1\n  public static COLOR = 2\n  public static TEX_COORD = 3\n  public static GENERIC = 4\n\n  public parse(\n    object: Mesh | Points,\n    options = {\n      decodeSpeed: 5,\n      encodeSpeed: 5,\n      encoderMethod: DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n      quantization: [16, 8, 8, 8, 8],\n      exportUvs: true,\n      exportNormals: true,\n      exportColor: false,\n    },\n  ): Int8Array {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error('DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.')\n    }\n\n    if (DracoEncoderModule === undefined) {\n      throw new Error('THREE.DRACOExporter: required the draco_encoder to work.')\n    }\n\n    const geometry = object.geometry\n\n    const dracoEncoder = DracoEncoderModule()\n    const encoder = new dracoEncoder.Encoder()\n    let builder\n    let dracoObject\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.')\n    }\n\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder()\n      dracoObject = new dracoEncoder.Mesh()\n\n      const vertices = geometry.getAttribute('position')\n      // @ts-ignore\n      builder.AddFloatAttributeToMesh(\n        dracoObject,\n        dracoEncoder.POSITION,\n        vertices.count,\n        vertices.itemSize,\n        vertices.array,\n      )\n\n      const faces = geometry.getIndex()\n\n      if (faces !== null) {\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array as Uint16Array | Uint32Array)\n      } else {\n        const faces = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count)\n\n        for (let i = 0; i < faces.length; i++) {\n          faces[i] = i\n        }\n\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces)\n      }\n\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute('normal')\n\n        if (normals !== undefined) {\n          // @ts-ignore\n          builder.AddFloatAttributeToMesh(\n            dracoObject,\n            dracoEncoder.NORMAL,\n            normals.count,\n            normals.itemSize,\n            normals.array,\n          )\n        }\n      }\n\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute('uv')\n\n        if (uvs !== undefined) {\n          // @ts-ignore\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array)\n        }\n      }\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color')\n\n        if (colors !== undefined) {\n          // @ts-ignore\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array)\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      // @ts-ignore\n      builder = new dracoEncoder.PointCloudBuilder()\n      // @ts-ignore\n      dracoObject = new dracoEncoder.PointCloud()\n\n      const vertices = geometry.getAttribute('position')\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array)\n\n      if (options.exportColor) {\n        const colors = geometry.getAttribute('color')\n\n        if (colors !== undefined) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array)\n        }\n      }\n    } else {\n      throw new Error('DRACOExporter: Unsupported object type.')\n    }\n\n    //Compress using draco encoder\n\n    const encodedData = new dracoEncoder.DracoInt8Array()\n\n    //Sets the desired encoding and decoding speed for the given options from 0 (slowest speed, but the best compression) to 10 (fastest, but the worst compression).\n\n    const encodeSpeed = options.encodeSpeed !== undefined ? options.encodeSpeed : 5\n    const decodeSpeed = options.decodeSpeed !== undefined ? options.decodeSpeed : 5\n\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed)\n\n    // Sets the desired encoding method for a given geometry.\n\n    if (options.encoderMethod !== undefined) {\n      encoder.SetEncodingMethod(options.encoderMethod)\n    }\n\n    // Sets the quantization (number of bits used to represent) compression options for a named attribute.\n    // The attribute values will be quantized in a box defined by the maximum extent of the attribute values.\n    if (options.quantization !== undefined) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== undefined) {\n          encoder.SetAttributeQuantization(i, options.quantization[i])\n        }\n      }\n    }\n\n    let length\n\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData)\n    } else {\n      // @ts-ignore\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData)\n    }\n\n    dracoEncoder.destroy(dracoObject)\n\n    if (length === 0) {\n      throw new Error('THREE.DRACOExporter: Draco encoding failed.')\n    }\n\n    //Copy encoded data to buffer.\n    const outputData = new Int8Array(new ArrayBuffer(length))\n\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i)\n    }\n\n    dracoEncoder.destroy(encodedData)\n    dracoEncoder.destroy(encoder)\n    dracoEncoder.destroy(builder)\n\n    return outputData\n  }\n}\n\nexport { DRACOExporter }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}